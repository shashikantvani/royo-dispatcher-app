{"version":3,"file":"snippet.min.js","sources":["snippet.js"],"sourcesContent":["(function (win, doc) {\r\n    var locn = win.location;\r\n    var helpLink = \"https://go.microsoft.com/fwlink/?linkid=2128109\";\r\n    var scriptText = \"script\";\r\n    var strInstrumentationKey = \"instrumentationKey\";\r\n    var strIngestionendpoint = \"ingestionendpoint\";\r\n    var strDisableExceptionTracking = \"disableExceptionTracking\";\r\n    var strAiDevice = \"ai.device.\";\r\n    var strAiOperationName = \"ai.operation.name\";\r\n    var strAiSdkVersion = \"ai.internal.sdkVersion\";\r\n    var strToLowerCase = \"toLowerCase\";\r\n    var strConStringIKey = strInstrumentationKey[strToLowerCase]();\r\n    var strEmpty = \"\";\r\n    var strUndefined = \"undefined\";\r\n    var strCrossOrigin = \"crossOrigin\";\r\n    var strPostMethod = \"POST\";\r\n    var sdkInstanceName = \"appInsightsSDK\"; // required for Initialization to find the current instance\r\n    var aiName = cfg.name || \"appInsights\"; // provide non default instance name through snipConfig name value\r\n    if (cfg.name || win[sdkInstanceName]) {\r\n        // Only set if supplied or another name is defined to avoid polluting the global namespace\r\n        win[sdkInstanceName] = aiName;\r\n    }\r\n    var aiSdk = win[aiName] || (function (aiConfig) {\r\n        var loadFailed = false;\r\n        var handled = false;\r\n        var appInsights = {\r\n            initialize: true,\r\n            queue: [],\r\n            sv: \"7\",\r\n            version: 2.0,\r\n            config: aiConfig\r\n        };\r\n        function isIE() {\r\n            var nav = navigator;\r\n            if (nav) {\r\n                var userAgent = (nav.userAgent || \"\").toLowerCase();\r\n                return (userAgent.indexOf(\"msie\") !== -1 || userAgent.indexOf(\"trident/\") !== -1);\r\n            }\r\n            return false;\r\n        }\r\n        function _parseConnectionString() {\r\n            var fields = {};\r\n            var connectionString = aiConfig.connectionString;\r\n            if (connectionString) {\r\n                var kvPairs = connectionString.split(\";\");\r\n                for (var lp = 0; lp < kvPairs.length; lp++) {\r\n                    var kvParts = kvPairs[lp].split(\"=\");\r\n                    if (kvParts.length === 2) { // only save fields with valid formats\r\n                        fields[kvParts[0][strToLowerCase]()] = kvParts[1];\r\n                    }\r\n                }\r\n            }\r\n            // apply the default endpoints\r\n            if (!fields[strIngestionendpoint]) {\r\n                // use endpoint suffix where overrides are not provided\r\n                var endpointSuffix = fields.endpointsuffix;\r\n                // Only fetch the location if a suffix was supplied\r\n                var fLocation = endpointSuffix ? fields.location : null;\r\n                fields[strIngestionendpoint] = \"https://\" + (fLocation ? fLocation + \".\" : strEmpty) + \"dc.\" + (endpointSuffix || \"services.visualstudio.com\");\r\n            }\r\n            return fields;\r\n        }\r\n        function _sendEvents(evts, endpointUrl) {\r\n            if (JSON) {\r\n                var sender = win.fetch;\r\n                if (sender && !cfg.useXhr) {\r\n                    sender(endpointUrl, { method: strPostMethod, body: JSON.stringify(evts), mode: \"cors\" });\r\n                }\r\n                else if (XMLHttpRequest) {\r\n                    // IE doesn't support fetch and private clouds may only be using IE\r\n                    var xhr = new XMLHttpRequest();\r\n                    xhr.open(strPostMethod, endpointUrl);\r\n                    xhr.setRequestHeader(\"Content-type\", \"application/json\");\r\n                    xhr.send(JSON.stringify(evts));\r\n                }\r\n            }\r\n        }\r\n        function _reportFailure(targetSrc) {\r\n            if (cfg.dle === true) {\r\n                return;\r\n            }\r\n            var conString = _parseConnectionString();\r\n            var iKey = conString[strConStringIKey] || aiConfig[strInstrumentationKey] || strEmpty;\r\n            var ingest = conString[strIngestionendpoint];\r\n            if (ingest && ingest.slice(-1) === \"/\") {\r\n                ingest = ingest.slice(0, -1);\r\n            }\r\n            var endpointUrl = ingest ? ingest + \"/v2/track\" : aiConfig.endpointUrl; // only add /v2/track when from connectionstring\r\n            var message = \"SDK LOAD Failure: Failed to load Application Insights SDK script (See stack for details)\";\r\n            var evts = [];\r\n            evts.push(_createException(iKey, message, targetSrc, endpointUrl));\r\n            evts.push(_createInternal(iKey, message, targetSrc, endpointUrl));\r\n            _sendEvents(evts, endpointUrl);\r\n        }\r\n        // Gets the time as an ISO date format, using a function as IE7/8 doesn't support toISOString\r\n        function _getTime() {\r\n            var date = new Date();\r\n            function pad(num) {\r\n                var r = strEmpty + num;\r\n                if (r.length === 1) {\r\n                    r = \"0\" + r;\r\n                }\r\n                return r;\r\n            }\r\n            return date.getUTCFullYear()\r\n                + \"-\" + pad(date.getUTCMonth() + 1)\r\n                + \"-\" + pad(date.getUTCDate())\r\n                + \"T\" + pad(date.getUTCHours())\r\n                + \":\" + pad(date.getUTCMinutes())\r\n                + \":\" + pad(date.getUTCSeconds())\r\n                + \".\" + String((date.getUTCMilliseconds() / 1000).toFixed(3)).slice(2, 5)\r\n                + \"Z\";\r\n        }\r\n        function _createEnvelope(iKey, theType) {\r\n            var tags = {};\r\n            var type = \"Browser\";\r\n            tags[strAiDevice + \"id\"] = type[strToLowerCase]();\r\n            tags[strAiDevice + \"type\"] = type;\r\n            tags[strAiOperationName] = locn && locn.pathname || \"_unknown_\";\r\n            tags[strAiSdkVersion] = \"javascript:snippet_\" + (appInsights.sv || appInsights.version);\r\n            var envelope = {\r\n                time: _getTime(),\r\n                iKey: iKey,\r\n                name: \"Microsoft.ApplicationInsights.\" + iKey.replace(/-/g, strEmpty) + \".\" + theType,\r\n                sampleRate: 100,\r\n                tags: tags,\r\n                data: {\r\n                    baseData: {\r\n                        ver: 2\r\n                    }\r\n                },\r\n                ver: 4.0,\r\n                seq: \"1\",\r\n                aiDataContract: undefined\r\n            };\r\n            return envelope;\r\n        }\r\n        function _createInternal(iKey, message, targetSrc, endpointUrl) {\r\n            var envelope = _createEnvelope(iKey, \"Message\");\r\n            var data = envelope.data;\r\n            data.baseType = \"MessageData\";\r\n            var baseData = data.baseData;\r\n            baseData.message = \"AI (Internal): 99 message:\\\"\" + (message + \" (\" + targetSrc + \")\").replace(/\\\"/g, strEmpty) + \"\\\"\";\r\n            baseData.properties = {\r\n                endpoint: endpointUrl\r\n            };\r\n            return envelope;\r\n        }\r\n        function _createException(iKey, message, targetSrc, endpointUrl) {\r\n            var envelope = _createEnvelope(iKey, \"Exception\");\r\n            var data = envelope.data;\r\n            data.baseType = \"ExceptionData\";\r\n            data.baseData.exceptions = [{\r\n                    typeName: \"SDKLoadFailed\",\r\n                    message: message.replace(/\\./g, \"-\"),\r\n                    hasFullStack: false,\r\n                    stack: message + \"\\nSnippet failed to load [\" + targetSrc + \"] -- Telemetry is disabled\\nHelp Link: \" + helpLink + \"\\nHost: \" + (locn && locn.pathname || \"_unknown_\") + \"\\nEndpoint: \" + endpointUrl,\r\n                    parsedStack: []\r\n                }];\r\n            return envelope;\r\n        }\r\n        var domainRetryIndex = -1;\r\n        var domainRetryCount = 0;\r\n        var domains = [\r\n            \"js.monitor.azure.com\",\r\n            \"js.cdn.applicationinsights.io\",\r\n            \"js.cdn.monitor.azure.com\",\r\n            \"js0.cdn.applicationinsights.io\",\r\n            \"js0.cdn.monitor.azure.com\",\r\n            \"js2.cdn.applicationinsights.io\",\r\n            \"js2.cdn.monitor.azure.com\",\r\n            \"az416426.vo.msecnd.net\" // this domain is supported but not recommended\r\n        ];\r\n        // Assigning these to local variables allows them to be minified to save space:\r\n        var targetSrc = aiConfig[\"url\"] || cfg.src;\r\n        if (targetSrc) {\r\n            if (isIE() && targetSrc.indexOf(\"ai.3\") !== -1) {\r\n                // This regex matches any URL which contains \"\\ai.3.\" but not any full versions like \"\\ai.3.1\" etc\r\n                targetSrc = targetSrc.replace(/(\\/)(ai\\.3\\.)([^\\d]*)$/, function (_all, g1, g2) {\r\n                    return g1 + \"ai.2\" + g2;\r\n                });\r\n                // let message = \"Load Version 2 SDK instead to support IE\"; // where to report this error?\r\n            }\r\n            if (cfg.cr !== false) {\r\n                for (var i = 0; i < domains.length; i++) {\r\n                    if (targetSrc.indexOf(domains[i]) > 0) {\r\n                        domainRetryIndex = i;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            var _handleError_1 = function (evt) {\r\n                appInsights.queue = []; // Clear the queue\r\n                if (!handled) {\r\n                    // start retry\r\n                    if (domainRetryIndex >= 0 && domainRetryCount + 1 < domains.length) { // domainRetryIndex will be negative when client using own domain (the supported domain list is defined above)\r\n                        var nextIdx_1 = (domainRetryIndex + domainRetryCount + 1) % domains.length;\r\n                        _createScript_1(targetSrc.replace(/^(.*\\/\\/)([\\w\\.]*)(\\/.*)$/, function (_all, http, domain, qs) {\r\n                            return http + domains[nextIdx_1] + qs;\r\n                        }));\r\n                        domainRetryCount += 1;\r\n                    }\r\n                    else {\r\n                        handled = true;\r\n                        loadFailed = true;\r\n                        _reportFailure(targetSrc);\r\n                    }\r\n                }\r\n            };\r\n            var _handleLoad_1 = function (evt, isAbort) {\r\n                if (!handled) {\r\n                    // IE10, Opera calls loaded before the script is processed.\r\n                    // so delaying to give the script a chance to be processed\r\n                    setTimeout(function () {\r\n                        if (isAbort || !appInsights.core) {\r\n                            _handleError_1();\r\n                        }\r\n                    }, 500);\r\n                }\r\n                loadFailed = false;\r\n            };\r\n            var _createScript_1 = function (src) {\r\n                var scriptElement = doc.createElement(scriptText);\r\n                scriptElement[\"src\"] = src;\r\n                // Allocate Cross origin only if defined and available\r\n                var crossOrigin = cfg[strCrossOrigin];\r\n                if ((crossOrigin || crossOrigin === \"\") && scriptElement[strCrossOrigin] != strUndefined) {\r\n                    scriptElement[strCrossOrigin] = crossOrigin;\r\n                }\r\n                scriptElement.onload = _handleLoad_1;\r\n                scriptElement.onerror = _handleError_1;\r\n                // Some browsers support onload while others onreadystatechange and others both\r\n                scriptElement[\"onreadystatechange\"] = function (evt, isAbort) {\r\n                    if (scriptElement[\"readyState\"] === \"loaded\" || scriptElement[\"readyState\"] === \"complete\") {\r\n                        _handleLoad_1(evt, isAbort);\r\n                    }\r\n                };\r\n                if (cfg.ld && cfg.ld < 0) {\r\n                    // if user wants to append tag to document head, blocking page load\r\n                    var headNode = doc.getElementsByTagName(\"head\")[0];\r\n                    headNode.appendChild(scriptElement);\r\n                }\r\n                else {\r\n                    setTimeout(function () {\r\n                        // Attempts to place the script tag in the same location as the first script on the page\r\n                        doc.getElementsByTagName(scriptText)[0].parentNode.appendChild(scriptElement);\r\n                    }, cfg.ld || 0);\r\n                }\r\n                return scriptElement;\r\n            };\r\n            _createScript_1(targetSrc);\r\n        }\r\n        // capture initial cookie\r\n        try {\r\n            appInsights.cookie = doc.cookie;\r\n        }\r\n        catch (e) {\r\n            // eslint-disable-next-line no-empty\r\n        }\r\n        function _createMethods(methods) {\r\n            while (methods.length) {\r\n                (function (name) {\r\n                    // Define a temporary method that queues-up a the real method call\r\n                    appInsights[name] = function () {\r\n                        // Capture the original arguments passed to the method\r\n                        var originalArguments = arguments;\r\n                        if (!loadFailed) { // If we have detected that the main script failed to load then stop queuing events that will never be processed\r\n                            // Queue-up a call to the real method\r\n                            appInsights.queue.push(function () {\r\n                                // Invoke the real method with the captured original arguments\r\n                                appInsights[name].apply(appInsights, originalArguments);\r\n                            });\r\n                        }\r\n                    };\r\n                })(methods.pop());\r\n            }\r\n        }\r\n        var track = \"track\";\r\n        var trackPage = \"TrackPage\";\r\n        var trackEvent = \"TrackEvent\";\r\n        _createMethods([track + \"Event\",\r\n            track + \"PageView\",\r\n            track + \"Exception\",\r\n            track + \"Trace\",\r\n            track + \"DependencyData\",\r\n            track + \"Metric\",\r\n            track + \"PageViewPerformance\",\r\n            \"start\" + trackPage,\r\n            \"stop\" + trackPage,\r\n            \"start\" + trackEvent,\r\n            \"stop\" + trackEvent,\r\n            \"addTelemetryInitializer\",\r\n            \"setAuthenticatedUserContext\",\r\n            \"clearAuthenticatedUserContext\",\r\n            \"flush\"]);\r\n        // expose SeverityLevel enum\r\n        appInsights[\"SeverityLevel\"] = {\r\n            Verbose: 0,\r\n            Information: 1,\r\n            Warning: 2,\r\n            Error: 3,\r\n            Critical: 4\r\n        };\r\n        // Collect global errors\r\n        // Note: ApplicationInsightsAnalytics is the extension string identifier for\r\n        //  AppAnalytics. It is defined in ApplicationInsights.ts:ApplicationInsights.identifer\r\n        var analyticsCfg = ((aiConfig.extensionConfig || {}).ApplicationInsightsAnalytics || {});\r\n        if (!(aiConfig[strDisableExceptionTracking] === true || analyticsCfg[strDisableExceptionTracking] === true)) {\r\n            var method_1 = \"onerror\";\r\n            _createMethods([\"_\" + method_1]);\r\n            var originalOnError_1 = win[method_1];\r\n            win[method_1] = function (message, url, lineNumber, columnNumber, error) {\r\n                var handled = originalOnError_1 && originalOnError_1(message, url, lineNumber, columnNumber, error);\r\n                if (handled !== true) {\r\n                    appInsights[\"_\" + method_1]({\r\n                        message: message,\r\n                        url: url,\r\n                        lineNumber: lineNumber,\r\n                        columnNumber: columnNumber,\r\n                        error: error,\r\n                        evt: win.event\r\n                    });\r\n                }\r\n                return handled;\r\n            };\r\n            aiConfig[\"autoExceptionInstrumented\"] = true;\r\n        }\r\n        return appInsights;\r\n    })(cfg.cfg);\r\n    // global instance must be set in this order to mitigate issues in ie8 and lower\r\n    win[aiName] = aiSdk;\r\n    function _onInit() {\r\n        if (cfg.onInit) {\r\n            cfg.onInit(aiSdk);\r\n        }\r\n    }\r\n    // if somebody calls the snippet twice, don't report page view again\r\n    if (aiSdk.queue && aiSdk.queue.length === 0) {\r\n        aiSdk.queue.push(_onInit);\r\n        aiSdk.trackPageView({});\r\n    }\r\n    else {\r\n        // Already loaded so just call the onInit\r\n        _onInit();\r\n    }\r\n})(window, document);\r\nexport {};\r\n"],"names":["_onInit","cfg","onInit","aiSdk","strToLowerCase","strCrossOrigin","strPostMethod","sdkInstanceName","aiName","win","window","doc","document","locn","location","scriptText","strIngestionendpoint","strDisableExceptionTracking","strAiDevice","name","aiConfig","loadFailed","handled","appInsights","initialize","queue","sv","version","config","_createEnvelope","iKey","theType","tags","type","pad","num","r","length","pathname","time","date","Date","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","toFixed","slice","replace","sampleRate","data","baseData","ver","seq","aiDataContract","undefined","domainRetryIndex","domainRetryCount","domains","targetSrc","src","nav","navigator","userAgent","toLowerCase","indexOf","_all","g1","g2","cr","i","_handleError_1","evt","nextIdx_1","endpointUrl","evts","envelope","sender","xhr","_createScript_1","http","domain","qs","dle","conString","fLocation","fields","connectionString","kvPairs","split","lp","kvParts","endpointSuffix","endpointsuffix","_parseConnectionString","ingest","push","message","baseType","exceptions","typeName","hasFullStack","stack","parsedStack","properties","endpoint","JSON","fetch","useXhr","method","body","stringify","mode","XMLHttpRequest","open","setRequestHeader","send","_handleLoad_1","isAbort","setTimeout","core","scriptElement","createElement","crossOrigin","onload","onerror","ld","getElementsByTagName","appendChild","parentNode","cookie","e","_createMethods","methods","originalArguments","arguments","apply","pop","method_1","originalOnError_1","track","trackPage","trackEvent","analyticsCfg","Verbose","Information","Warning","Error","Critical","extensionConfig","ApplicationInsightsAnalytics","url","lineNumber","columnNumber","error","event","trackPageView"],"mappings":"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"}