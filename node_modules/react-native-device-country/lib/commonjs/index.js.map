{"version":3,"sources":["index.tsx"],"names":["DeviceCountryModule","NativeModules","TYPE_ANY","TYPE_TELEPHONY","TYPE_CONFIGURATION","getCountryCodeIOS","Promise","resolve","reject","getCountryCode","then","result","catch","e","getCountryCodeAndroid","type","JSON","parse","Platform","OS"],"mappings":";;;;;;;AAAA;;AACA,MAAM;AAAEA,EAAAA;AAAF,IAA0BC,0BAAhC;AACO,MAAMC,QAAQ,GAAG,KAAjB;;AACA,MAAMC,cAAc,GAAG,WAAvB;;AACA,MAAMC,kBAAkB,GAAG,QAA3B;;;AAYA,MAAMC,iBAAiB,GAAG,MAAM;AACrC,SAAO,IAAIC,OAAJ,CAAyB,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACnDR,IAAAA,mBAAmB,CAACS,cAApB,CAAmCL,kBAAnC,EACGM,IADH,CACSC,MAAD,IAAyB;AAC7BJ,MAAAA,OAAO,CAACI,MAAD,CAAP;AACD,KAHH,EAIGC,KAJH,CAIUC,CAAD,IAAY;AACjBL,MAAAA,MAAM,CAACK,CAAD,CAAN;AACD,KANH;AAOD,GARM,CAAP;AASD,CAVM;;;;AAYA,MAAMC,qBAAqB,GAAIC,IAAD,IAAkB;AACrD,SAAO,IAAIT,OAAJ,CAAyB,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACnDR,IAAAA,mBAAmB,CAACS,cAApB,CAAmCM,IAAI,IAAIb,QAA3C,EACGQ,IADH,CACSC,MAAD,IAAoB;AACxBJ,MAAAA,OAAO,CAACS,IAAI,CAACC,KAAL,CAAWN,MAAX,CAAD,CAAP;AACD,KAHH,EAIGC,KAJH,CAIUC,CAAD,IAAY;AACjBL,MAAAA,MAAM,CAACK,CAAD,CAAN;AACD,KANH;AAOD,GARM,CAAP;AASD,CAVM;;;;AAYA,MAAMJ,cAAc,GAAIM,IAAD,IAAkB;AAC9C,SAAOG,sBAASC,EAAT,KAAgB,KAAhB,GACHd,iBAAiB,EADd,GAEHS,qBAAqB,CAACC,IAAD,CAFzB;AAGD,CAJM;;;eAMQ;AACbN,EAAAA;AADa,C","sourcesContent":["import { NativeModules, Platform } from 'react-native';\nconst { DeviceCountryModule } = NativeModules;\nexport const TYPE_ANY = 'any';\nexport const TYPE_TELEPHONY = 'telephony';\nexport const TYPE_CONFIGURATION = 'config';\n\nexport type Types =\n  | typeof TYPE_ANY\n  | typeof TYPE_TELEPHONY\n  | typeof TYPE_CONFIGURATION;\n\nexport interface ResolveType {\n  code: string;\n  type: string;\n}\n\nexport const getCountryCodeIOS = () => {\n  return new Promise<ResolveType>((resolve, reject) => {\n    DeviceCountryModule.getCountryCode(TYPE_CONFIGURATION)\n      .then((result: ResolveType) => {\n        resolve(result);\n      })\n      .catch((e: any) => {\n        reject(e);\n      });\n  });\n};\n\nexport const getCountryCodeAndroid = (type?: Types) => {\n  return new Promise<ResolveType>((resolve, reject) => {\n    DeviceCountryModule.getCountryCode(type || TYPE_ANY)\n      .then((result: string) => {\n        resolve(JSON.parse(result));\n      })\n      .catch((e: any) => {\n        reject(e);\n      });\n  });\n};\n\nexport const getCountryCode = (type?: Types) => {\n  return Platform.OS === 'ios'\n    ? getCountryCodeIOS()\n    : getCountryCodeAndroid(type);\n};\n\nexport default {\n  getCountryCode,\n};\n"]}