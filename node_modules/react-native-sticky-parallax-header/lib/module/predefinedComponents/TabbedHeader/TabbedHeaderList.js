function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from 'react';
import { View } from 'react-native';
import Animated, { useAnimatedStyle } from 'react-native-reanimated';
import { SafeAreaView } from 'react-native-safe-area-context';
import { commonStyles } from '../../constants';
import { StickyHeaderSectionList } from '../../primitiveComponents/StickyHeaderSectionList';
import { parseAnimatedColorProp } from '../common/utils/parseAnimatedColorProp';
import { HeaderBar } from './components/HeaderBar';
import { useTabbedHeaderList } from './hooks/useTabbedHeader';

function TabbedHeaderListInner(props, ref) {
  const {
    backgroundColor,
    contentContainerStyle,
    decelerationRate = 'fast',
    enableSafeAreaTopInset = true,
    logo,
    logoContainerStyle,
    logoResizeMode,
    logoStyle,
    nestedScrollEnabled = true,
    overScrollMode = 'never',
    renderHeader,
    renderHeaderBar,
    renderSectionFooter,
    renderSectionHeader,
    scrollEventThrottle = 16,
    stickySectionHeadersEnabled = true,
    viewabilityConfig = {
      itemVisiblePercentThreshold: 50
    },
    ...rest
  } = props;
  const {
    onMomentumScrollEnd,
    onScroll,
    onScrollEndDrag,
    onViewableItemsChanged,
    renderHeader: defaultRenderHeader,
    renderTabs,
    scrollViewRef
  } = useTabbedHeaderList(props);
  React.useImperativeHandle(ref, () => scrollViewRef.current);
  const wrapperAnimatedStyle = useAnimatedStyle(() => {
    return {
      backgroundColor: parseAnimatedColorProp(backgroundColor)
    };
  }, [backgroundColor]);
  return /*#__PURE__*/React.createElement(Animated.View, {
    style: [commonStyles.container, wrapperAnimatedStyle]
  }, renderHeaderBar ? renderHeaderBar() : logo ? /*#__PURE__*/React.createElement(HeaderBar, {
    backgroundColor: backgroundColor,
    enableSafeAreaTopInset: enableSafeAreaTopInset,
    logo: logo,
    logoContainerStyle: logoContainerStyle,
    logoResizeMode: logoResizeMode,
    logoStyle: logoStyle
  }) : /*#__PURE__*/React.createElement(SafeAreaView, {
    edges: ['left', 'right', ...(enableSafeAreaTopInset ? ['top'] : [])],
    style: commonStyles.stretch
  }), /*#__PURE__*/React.createElement(View, {
    style: commonStyles.container
  }, /*#__PURE__*/React.createElement(StickyHeaderSectionList, _extends({
    ref: scrollViewRef
  }, rest, {
    contentContainerStyle: contentContainerStyle,
    decelerationRate: decelerationRate,
    nestedScrollEnabled: nestedScrollEnabled,
    onMomentumScrollEnd: onMomentumScrollEnd,
    onScrollEndDrag: onScrollEndDrag,
    onScroll: onScroll,
    overScrollMode: overScrollMode,
    onViewableItemsChanged: onViewableItemsChanged,
    renderHeader: renderHeader !== null && renderHeader !== void 0 ? renderHeader : defaultRenderHeader,
    renderSectionFooter: renderSectionFooter,
    renderSectionHeader: renderSectionHeader,
    renderTabs: renderTabs,
    scrollEventThrottle: scrollEventThrottle,
    stickySectionHeadersEnabled: stickySectionHeadersEnabled,
    viewabilityConfig: viewabilityConfig
  }))));
}

export const TabbedHeaderList = /*#__PURE__*/React.forwardRef(TabbedHeaderListInner);
//# sourceMappingURL=TabbedHeaderList.js.map