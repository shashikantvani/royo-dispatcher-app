{"version":3,"sources":["withTabbedHeaderFlashList.tsx"],"names":["React","View","Animated","useAnimatedStyle","SafeAreaView","commonStyles","withStickyHeaderFlashList","parseAnimatedColorProp","HeaderBar","useTabbedFlashListHeader","withTabbedHeaderFlashList","flashListComponent","StickyHeaderFlashList","forwardRef","props","ref","backgroundColor","decelerationRate","enableSafeAreaTopInset","logo","logoContainerStyle","logoResizeMode","logoStyle","nestedScrollEnabled","overScrollMode","renderHeader","renderHeaderBar","scrollEventThrottle","viewabilityConfig","itemVisiblePercentThreshold","rest","onMomentumScrollEnd","onScroll","onScrollEndDrag","onViewableItemsChanged","defaultRenderHeader","renderTabs","scrollViewRef","useImperativeHandle","current","wrapperAnimatedStyle","container","stretch","wrapper"],"mappings":"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","sourcesContent":["import type { FlashList, FlashListProps } from '@shopify/flash-list';\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\nimport type { Edge } from 'react-native-safe-area-context';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nimport { commonStyles } from '../../constants';\nimport type { StickyHeaderFlashListProps } from '../../primitiveComponents/StickyHeaderProps';\nimport { withStickyHeaderFlashList } from '../../primitiveComponents/withStickyHeaderFlashList';\nimport { parseAnimatedColorProp } from '../common/utils/parseAnimatedColorProp';\n\nimport type { TabbedHeaderFlashListProps } from './TabbedHeaderProps';\nimport { HeaderBar } from './components/HeaderBar';\nimport { useTabbedFlashListHeader } from './hooks/useTabbedFlashListHeader';\n\nexport function withTabbedHeaderFlashList<ItemT>(\n  flashListComponent: React.ComponentClass<FlashListProps<ItemT>>\n) {\n  const StickyHeaderFlashList = withStickyHeaderFlashList(\n    flashListComponent as React.ComponentClass<FlashListProps<ItemT>>\n  ) as (\n    props: StickyHeaderFlashListProps<ItemT> & React.RefAttributes<FlashList<ItemT>>\n  ) => React.ReactElement;\n\n  return React.forwardRef<FlashList<ItemT>, TabbedHeaderFlashListProps<ItemT>>((props, ref) => {\n    const {\n      backgroundColor,\n      decelerationRate = 'fast',\n      enableSafeAreaTopInset = true,\n      logo,\n      logoContainerStyle,\n      logoResizeMode,\n      logoStyle,\n      nestedScrollEnabled = true,\n      overScrollMode = 'never',\n      renderHeader,\n      renderHeaderBar,\n      scrollEventThrottle = 16,\n      viewabilityConfig = { itemVisiblePercentThreshold: 50 },\n      ...rest\n    } = props;\n    const {\n      onMomentumScrollEnd,\n      onScroll,\n      onScrollEndDrag,\n      onViewableItemsChanged,\n      renderHeader: defaultRenderHeader,\n      renderTabs,\n      scrollViewRef,\n    } = useTabbedFlashListHeader<ItemT>(props);\n\n    React.useImperativeHandle(ref, () => scrollViewRef.current as FlashList<ItemT>);\n\n    const wrapperAnimatedStyle = useAnimatedStyle(() => {\n      return {\n        backgroundColor: parseAnimatedColorProp(backgroundColor),\n      };\n    }, [backgroundColor]);\n\n    return (\n      <Animated.View style={[commonStyles.container, wrapperAnimatedStyle]}>\n        {renderHeaderBar ? (\n          renderHeaderBar()\n        ) : logo ? (\n          <HeaderBar\n            backgroundColor={backgroundColor}\n            enableSafeAreaTopInset={enableSafeAreaTopInset}\n            logo={logo}\n            logoContainerStyle={logoContainerStyle}\n            logoResizeMode={logoResizeMode}\n            logoStyle={logoStyle}\n          />\n        ) : (\n          <SafeAreaView\n            edges={['left', 'right', ...(enableSafeAreaTopInset ? ['top' as Edge] : [])]}\n            style={commonStyles.stretch}\n          />\n        )}\n        <View style={commonStyles.wrapper}>\n          <StickyHeaderFlashList\n            ref={scrollViewRef}\n            {...rest}\n            decelerationRate={decelerationRate}\n            nestedScrollEnabled={nestedScrollEnabled}\n            overScrollMode={overScrollMode}\n            scrollEventThrottle={scrollEventThrottle}\n            viewabilityConfig={viewabilityConfig}\n            renderHeader={renderHeader ?? defaultRenderHeader}\n            renderTabs={renderTabs}\n            onScroll={onScroll}\n            onScrollEndDrag={onScrollEndDrag}\n            onMomentumScrollEnd={onMomentumScrollEnd}\n            onViewableItemsChanged={onViewableItemsChanged}\n          />\n        </View>\n      </Animated.View>\n    );\n  });\n}\n"]}