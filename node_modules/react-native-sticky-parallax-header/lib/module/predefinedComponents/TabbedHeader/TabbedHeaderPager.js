function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from 'react';
import { View } from 'react-native';
import Animated, { useAnimatedStyle, useWorkletCallback } from 'react-native-reanimated';
import { SafeAreaView } from 'react-native-safe-area-context';
import { commonStyles } from '../../constants';
import { StickyHeaderScrollView } from '../../primitiveComponents/StickyHeaderScrollView';
import { parseAnimatedColorProp } from '../common/utils/parseAnimatedColorProp';
import { HeaderBar } from './components/HeaderBar';
import { Pager } from './components/Pager';
import { useTabbedHeaderPager } from './hooks/useTabbedHeader';
export const TabbedHeaderPager = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    backgroundColor,
    children,
    contentContainerStyle,
    disableScrollToPosition,
    decelerationRate = 'fast',
    enableSafeAreaTopInset = true,
    initialPage,
    logo,
    logoContainerStyle,
    logoResizeMode,
    logoStyle,
    nestedScrollEnabled = true,
    onChangeTab,
    overScrollMode = 'never',
    pagerProps,
    rememberTabScrollPosition,
    renderHeader,
    renderHeaderBar,
    scrollEventThrottle = 16,
    ...rest
  } = props;
  const {
    currentPage,
    innerScrollHeight,
    onHorizontalPagerScroll,
    onMomentumScrollEnd,
    onScroll,
    onScrollEndDrag,
    renderHeader: defaultRenderHeader,
    renderTabs,
    scrollHeight,
    scrollValue,
    scrollViewRef,
    setCurrentPage
  } = useTabbedHeaderPager(props);
  React.useImperativeHandle(ref, () => scrollViewRef.current);
  const wrapperAnimatedStyle = useAnimatedStyle(() => {
    return {
      backgroundColor: parseAnimatedColorProp(backgroundColor)
    };
  }, [backgroundColor]);
  const handleChangeTab = React.useCallback((prevPage, newPage) => {
    setCurrentPage(newPage);
    onChangeTab === null || onChangeTab === void 0 ? void 0 : onChangeTab(prevPage, newPage);
  }, [onChangeTab, setCurrentPage]);
  const handleScroll = useWorkletCallback(e => {
    var _pagerProps$onScroll;

    onHorizontalPagerScroll(e);
    pagerProps === null || pagerProps === void 0 ? void 0 : (_pagerProps$onScroll = pagerProps.onScroll) === null || _pagerProps$onScroll === void 0 ? void 0 : _pagerProps$onScroll.call(pagerProps, e);
  }, [onHorizontalPagerScroll, pagerProps === null || pagerProps === void 0 ? void 0 : pagerProps.onScroll]);
  return /*#__PURE__*/React.createElement(Animated.View, {
    style: [commonStyles.container, wrapperAnimatedStyle]
  }, renderHeaderBar ? renderHeaderBar() : logo ? /*#__PURE__*/React.createElement(HeaderBar, {
    backgroundColor: backgroundColor,
    enableSafeAreaTopInset: enableSafeAreaTopInset,
    logo: logo,
    logoContainerStyle: logoContainerStyle,
    logoResizeMode: logoResizeMode,
    logoStyle: logoStyle
  }) : /*#__PURE__*/React.createElement(SafeAreaView, {
    edges: ['left', 'right', ...(enableSafeAreaTopInset ? ['top'] : [])],
    style: commonStyles.stretch
  }), /*#__PURE__*/React.createElement(View, {
    style: commonStyles.container
  }, /*#__PURE__*/React.createElement(StickyHeaderScrollView, _extends({
    ref: scrollViewRef
  }, rest, {
    contentContainerStyle: contentContainerStyle,
    decelerationRate: decelerationRate,
    nestedScrollEnabled: nestedScrollEnabled,
    onMomentumScrollEnd: onMomentumScrollEnd,
    onScrollEndDrag: onScrollEndDrag,
    onScroll: onScroll,
    overScrollMode: overScrollMode,
    renderHeader: renderHeader !== null && renderHeader !== void 0 ? renderHeader : defaultRenderHeader,
    renderTabs: renderTabs,
    scrollEventThrottle: scrollEventThrottle
  }), /*#__PURE__*/React.createElement(Pager, _extends({}, pagerProps, {
    disableScrollToPosition: disableScrollToPosition,
    initialPage: initialPage,
    minScrollHeight: innerScrollHeight,
    onChangeTab: handleChangeTab,
    onScroll: handleScroll,
    page: currentPage,
    rememberTabScrollPosition: rememberTabScrollPosition,
    scrollHeight: scrollHeight,
    scrollRef: scrollViewRef,
    scrollValue: scrollValue
  }), children))));
});
//# sourceMappingURL=TabbedHeaderPager.js.map