{"version":3,"sources":["TabbedHeaderList.tsx"],"names":["React","View","Animated","useAnimatedStyle","SafeAreaView","commonStyles","StickyHeaderSectionList","parseAnimatedColorProp","HeaderBar","useTabbedHeaderList","TabbedHeaderListInner","props","ref","backgroundColor","contentContainerStyle","decelerationRate","enableSafeAreaTopInset","logo","logoContainerStyle","logoResizeMode","logoStyle","nestedScrollEnabled","overScrollMode","renderHeader","renderHeaderBar","renderSectionFooter","renderSectionHeader","scrollEventThrottle","stickySectionHeadersEnabled","viewabilityConfig","itemVisiblePercentThreshold","rest","onMomentumScrollEnd","onScroll","onScrollEndDrag","onViewableItemsChanged","defaultRenderHeader","renderTabs","scrollViewRef","useImperativeHandle","current","wrapperAnimatedStyle","container","stretch","TabbedHeaderList","forwardRef"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,IAAT,QAAqB,cAArB;AACA,OAAOC,QAAP,IAAmBC,gBAAnB,QAA2C,yBAA3C;AAEA,SAASC,YAAT,QAA6B,gCAA7B;AAEA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,uBAAT,QAAwC,mDAAxC;AACA,SAASC,sBAAT,QAAuC,wCAAvC;AAGA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,mBAAT,QAAoC,yBAApC;;AAEA,SAASC,qBAAT,CACEC,KADF,EAEEC,GAFF,EAGE;AACA,QAAM;AACJC,IAAAA,eADI;AAEJC,IAAAA,qBAFI;AAGJC,IAAAA,gBAAgB,GAAG,MAHf;AAIJC,IAAAA,sBAAsB,GAAG,IAJrB;AAKJC,IAAAA,IALI;AAMJC,IAAAA,kBANI;AAOJC,IAAAA,cAPI;AAQJC,IAAAA,SARI;AASJC,IAAAA,mBAAmB,GAAG,IATlB;AAUJC,IAAAA,cAAc,GAAG,OAVb;AAWJC,IAAAA,YAXI;AAYJC,IAAAA,eAZI;AAaJC,IAAAA,mBAbI;AAcJC,IAAAA,mBAdI;AAeJC,IAAAA,mBAAmB,GAAG,EAflB;AAgBJC,IAAAA,2BAA2B,GAAG,IAhB1B;AAiBJC,IAAAA,iBAAiB,GAAG;AAAEC,MAAAA,2BAA2B,EAAE;AAA/B,KAjBhB;AAkBJ,OAAGC;AAlBC,MAmBFpB,KAnBJ;AAoBA,QAAM;AACJqB,IAAAA,mBADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,eAHI;AAIJC,IAAAA,sBAJI;AAKJZ,IAAAA,YAAY,EAAEa,mBALV;AAMJC,IAAAA,UANI;AAOJC,IAAAA;AAPI,MAQF7B,mBAAmB,CAAkBE,KAAlB,CARvB;AAUAX,EAAAA,KAAK,CAACuC,mBAAN,CAA0B3B,GAA1B,EAA+B,MAAM0B,aAAa,CAACE,OAAnD;AAEA,QAAMC,oBAAoB,GAAGtC,gBAAgB,CAAC,MAAM;AAClD,WAAO;AACLU,MAAAA,eAAe,EAAEN,sBAAsB,CAACM,eAAD;AADlC,KAAP;AAGD,GAJ4C,EAI1C,CAACA,eAAD,CAJ0C,CAA7C;AAMA,sBACE,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,KAAK,EAAE,CAACR,YAAY,CAACqC,SAAd,EAAyBD,oBAAzB;AAAtB,KACGjB,eAAe,GACdA,eAAe,EADD,GAEZP,IAAI,gBACN,oBAAC,SAAD;AACE,IAAA,eAAe,EAAEJ,eADnB;AAEE,IAAA,sBAAsB,EAAEG,sBAF1B;AAGE,IAAA,IAAI,EAAEC,IAHR;AAIE,IAAA,kBAAkB,EAAEC,kBAJtB;AAKE,IAAA,cAAc,EAAEC,cALlB;AAME,IAAA,SAAS,EAAEC;AANb,IADM,gBAUN,oBAAC,YAAD;AACE,IAAA,KAAK,EAAE,CAAC,MAAD,EAAS,OAAT,EAAkB,IAAIJ,sBAAsB,GAAG,CAAC,KAAD,CAAH,GAAqB,EAA/C,CAAlB,CADT;AAEE,IAAA,KAAK,EAAEX,YAAY,CAACsC;AAFtB,IAbJ,eAkBE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEtC,YAAY,CAACqC;AAA1B,kBACE,oBAAC,uBAAD;AACE,IAAA,GAAG,EAAEJ;AADP,KAEMP,IAFN;AAGE,IAAA,qBAAqB,EAAEjB,qBAHzB;AAIE,IAAA,gBAAgB,EAAEC,gBAJpB;AAKE,IAAA,mBAAmB,EAAEM,mBALvB;AAME,IAAA,mBAAmB,EAAEW,mBANvB;AAOE,IAAA,eAAe,EAAEE,eAPnB;AAQE,IAAA,QAAQ,EAAED,QARZ;AASE,IAAA,cAAc,EAAEX,cATlB;AAUE,IAAA,sBAAsB,EAAEa,sBAV1B;AAWE,IAAA,YAAY,EAAEZ,YAAF,aAAEA,YAAF,cAAEA,YAAF,GAAkBa,mBAXhC;AAYE,IAAA,mBAAmB,EAAEX,mBAZvB;AAaE,IAAA,mBAAmB,EAAEC,mBAbvB;AAcE,IAAA,UAAU,EAAEW,UAdd;AAeE,IAAA,mBAAmB,EAAEV,mBAfvB;AAgBE,IAAA,2BAA2B,EAAEC,2BAhB/B;AAiBE,IAAA,iBAAiB,EAAEC;AAjBrB,KADF,CAlBF,CADF;AA0CD;;AAMD,OAAO,MAAMe,gBAAgB,gBAAG5C,KAAK,CAAC6C,UAAN,CAAiBnC,qBAAjB,CAAzB","sourcesContent":["import * as React from 'react';\nimport type { SectionList } from 'react-native';\nimport { View } from 'react-native';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\nimport type { Edge } from 'react-native-safe-area-context';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nimport { commonStyles } from '../../constants';\nimport { StickyHeaderSectionList } from '../../primitiveComponents/StickyHeaderSectionList';\nimport { parseAnimatedColorProp } from '../common/utils/parseAnimatedColorProp';\n\nimport type { TabbedHeaderListProps } from './TabbedHeaderProps';\nimport { HeaderBar } from './components/HeaderBar';\nimport { useTabbedHeaderList } from './hooks/useTabbedHeader';\n\nfunction TabbedHeaderListInner<ItemT, SectionT>(\n  props: TabbedHeaderListProps<ItemT, SectionT>,\n  ref: React.ForwardedRef<SectionList<ItemT, SectionT>>\n) {\n  const {\n    backgroundColor,\n    contentContainerStyle,\n    decelerationRate = 'fast',\n    enableSafeAreaTopInset = true,\n    logo,\n    logoContainerStyle,\n    logoResizeMode,\n    logoStyle,\n    nestedScrollEnabled = true,\n    overScrollMode = 'never',\n    renderHeader,\n    renderHeaderBar,\n    renderSectionFooter,\n    renderSectionHeader,\n    scrollEventThrottle = 16,\n    stickySectionHeadersEnabled = true,\n    viewabilityConfig = { itemVisiblePercentThreshold: 50 },\n    ...rest\n  } = props;\n  const {\n    onMomentumScrollEnd,\n    onScroll,\n    onScrollEndDrag,\n    onViewableItemsChanged,\n    renderHeader: defaultRenderHeader,\n    renderTabs,\n    scrollViewRef,\n  } = useTabbedHeaderList<ItemT, SectionT>(props);\n\n  React.useImperativeHandle(ref, () => scrollViewRef.current as SectionList<ItemT, SectionT>);\n\n  const wrapperAnimatedStyle = useAnimatedStyle(() => {\n    return {\n      backgroundColor: parseAnimatedColorProp(backgroundColor),\n    };\n  }, [backgroundColor]);\n\n  return (\n    <Animated.View style={[commonStyles.container, wrapperAnimatedStyle]}>\n      {renderHeaderBar ? (\n        renderHeaderBar()\n      ) : logo ? (\n        <HeaderBar\n          backgroundColor={backgroundColor}\n          enableSafeAreaTopInset={enableSafeAreaTopInset}\n          logo={logo}\n          logoContainerStyle={logoContainerStyle}\n          logoResizeMode={logoResizeMode}\n          logoStyle={logoStyle}\n        />\n      ) : (\n        <SafeAreaView\n          edges={['left', 'right', ...(enableSafeAreaTopInset ? ['top' as Edge] : [])]}\n          style={commonStyles.stretch}\n        />\n      )}\n      <View style={commonStyles.container}>\n        <StickyHeaderSectionList\n          ref={scrollViewRef}\n          {...rest}\n          contentContainerStyle={contentContainerStyle}\n          decelerationRate={decelerationRate}\n          nestedScrollEnabled={nestedScrollEnabled}\n          onMomentumScrollEnd={onMomentumScrollEnd}\n          onScrollEndDrag={onScrollEndDrag}\n          onScroll={onScroll}\n          overScrollMode={overScrollMode}\n          onViewableItemsChanged={onViewableItemsChanged}\n          renderHeader={renderHeader ?? defaultRenderHeader}\n          renderSectionFooter={renderSectionFooter}\n          renderSectionHeader={renderSectionHeader}\n          renderTabs={renderTabs}\n          scrollEventThrottle={scrollEventThrottle}\n          stickySectionHeadersEnabled={stickySectionHeadersEnabled}\n          viewabilityConfig={viewabilityConfig}\n        />\n      </View>\n    </Animated.View>\n  );\n}\n\ntype TabbedHeaderListType = <ItemT, SectionT>(\n  props: TabbedHeaderListProps<ItemT, SectionT> & React.RefAttributes<SectionList<ItemT>>\n) => React.ReactElement;\n\nexport const TabbedHeaderList = React.forwardRef(TabbedHeaderListInner) as TabbedHeaderListType;\n"]}