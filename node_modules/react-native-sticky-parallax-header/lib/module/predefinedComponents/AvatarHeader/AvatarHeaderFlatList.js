function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from 'react';
import { View } from 'react-native';
import Animated, { useAnimatedStyle } from 'react-native-reanimated';
import { commonStyles } from '../../constants';
import { StickyHeaderFlatList } from '../../primitiveComponents/StickyHeaderFlatList';
import { parseAnimatedColorProp } from '../common/utils/parseAnimatedColorProp';
import { HeaderBar } from './components/HeaderBar';
import { useAvatarHeader } from './hooks/useAvatarHeader';

function AvatarHeaderFlatListInner(props, ref) {
  const {
    backgroundColor,
    contentContainerStyle,
    data,
    decelerationRate = 'fast',
    enableSafeAreaTopInset = true,
    image,
    keyExtractor,
    leftTopIcon,
    leftTopIconAccessibilityLabel,
    leftTopIconOnPress,
    leftTopIconTestID,
    nestedScrollEnabled = true,
    overScrollMode = 'never',
    renderHeader,
    renderHeaderBar,
    renderItem,
    rightTopIcon,
    rightTopIconAccessibilityLabel,
    rightTopIconOnPress,
    rightTopIconTestID,
    scrollEventThrottle = 16,
    title,
    titleStyle,
    ...rest
  } = props;
  const {
    onMomentumScrollEnd,
    onScroll,
    onScrollEndDrag,
    parallaxHeight,
    renderHeader: defaultRenderHeader,
    scrollValue,
    scrollViewRef
  } = useAvatarHeader(props);
  React.useImperativeHandle(ref, () => scrollViewRef.current);
  const wrapperAnimatedStyle = useAnimatedStyle(() => {
    return {
      backgroundColor: parseAnimatedColorProp(backgroundColor)
    };
  }, [backgroundColor]);
  return /*#__PURE__*/React.createElement(Animated.View, {
    style: [commonStyles.wrapper, wrapperAnimatedStyle]
  }, renderHeaderBar ? renderHeaderBar() : /*#__PURE__*/React.createElement(HeaderBar, {
    backgroundColor: backgroundColor,
    enableSafeAreaTopInset: enableSafeAreaTopInset,
    height: parallaxHeight,
    image: image,
    leftTopIcon: leftTopIcon,
    leftTopIconAccessibilityLabel: leftTopIconAccessibilityLabel,
    leftTopIconOnPress: leftTopIconOnPress,
    leftTopIconTestID: leftTopIconTestID,
    rightTopIcon: rightTopIcon,
    rightTopIconAccessibilityLabel: rightTopIconAccessibilityLabel,
    rightTopIconOnPress: rightTopIconOnPress,
    rightTopIconTestID: rightTopIconTestID,
    scrollValue: scrollValue,
    title: title,
    titleStyle: titleStyle
  }), /*#__PURE__*/React.createElement(View, {
    style: commonStyles.wrapper
  }, /*#__PURE__*/React.createElement(StickyHeaderFlatList, _extends({
    ref: scrollViewRef
  }, rest, {
    contentContainerStyle: contentContainerStyle,
    data: data,
    decelerationRate: decelerationRate,
    keyExtractor: keyExtractor,
    nestedScrollEnabled: nestedScrollEnabled,
    onMomentumScrollEnd: onMomentumScrollEnd,
    onScrollEndDrag: onScrollEndDrag,
    onScroll: onScroll,
    overScrollMode: overScrollMode,
    renderHeader: renderHeader !== null && renderHeader !== void 0 ? renderHeader : defaultRenderHeader,
    renderItem: renderItem,
    scrollEventThrottle: scrollEventThrottle
  }))));
}

export const AvatarHeaderFlatList = /*#__PURE__*/React.forwardRef(AvatarHeaderFlatListInner);
//# sourceMappingURL=AvatarHeaderFlatList.js.map