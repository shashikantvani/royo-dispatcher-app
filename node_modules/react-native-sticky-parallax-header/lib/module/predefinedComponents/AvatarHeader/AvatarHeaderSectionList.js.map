{"version":3,"sources":["AvatarHeaderSectionList.tsx"],"names":["React","View","Animated","useAnimatedStyle","commonStyles","StickyHeaderSectionList","parseAnimatedColorProp","HeaderBar","useAvatarHeader","AvatarHeaderSectionListInner","props","ref","backgroundColor","contentContainerStyle","decelerationRate","enableSafeAreaTopInset","image","leftTopIcon","leftTopIconAccessibilityLabel","leftTopIconOnPress","leftTopIconTestID","nestedScrollEnabled","overScrollMode","renderHeader","renderHeaderBar","renderSectionFooter","renderSectionHeader","rightTopIcon","rightTopIconAccessibilityLabel","rightTopIconOnPress","rightTopIconTestID","scrollEventThrottle","sections","stickySectionHeadersEnabled","title","titleStyle","rest","onMomentumScrollEnd","onScroll","onScrollEndDrag","parallaxHeight","defaultRenderHeader","scrollValue","scrollViewRef","useImperativeHandle","current","wrapperAnimatedStyle","wrapper","AvatarHeaderSectionList","forwardRef"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type { SectionList } from 'react-native';\nimport { View } from 'react-native';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\n\nimport { commonStyles } from '../../constants';\nimport { StickyHeaderSectionList } from '../../primitiveComponents/StickyHeaderSectionList';\nimport { parseAnimatedColorProp } from '../common/utils/parseAnimatedColorProp';\n\nimport type { AvatarHeaderSectionListProps } from './AvatarHeaderProps';\nimport { HeaderBar } from './components/HeaderBar';\nimport { useAvatarHeader } from './hooks/useAvatarHeader';\n\nfunction AvatarHeaderSectionListInner<ItemT, SectionT>(\n  props: AvatarHeaderSectionListProps<ItemT, SectionT>,\n  ref: React.ForwardedRef<SectionList<ItemT, SectionT>>\n) {\n  const {\n    backgroundColor,\n    contentContainerStyle,\n    decelerationRate = 'fast',\n    enableSafeAreaTopInset = true,\n    image,\n    leftTopIcon,\n    leftTopIconAccessibilityLabel,\n    leftTopIconOnPress,\n    leftTopIconTestID,\n    nestedScrollEnabled = true,\n    overScrollMode = 'never',\n    renderHeader,\n    renderHeaderBar,\n    renderSectionFooter,\n    renderSectionHeader,\n    rightTopIcon,\n    rightTopIconAccessibilityLabel,\n    rightTopIconOnPress,\n    rightTopIconTestID,\n    scrollEventThrottle = 16,\n    sections,\n    stickySectionHeadersEnabled = true,\n    title,\n    titleStyle,\n    ...rest\n  } = props;\n  const {\n    onMomentumScrollEnd,\n    onScroll,\n    onScrollEndDrag,\n    parallaxHeight,\n    renderHeader: defaultRenderHeader,\n    scrollValue,\n    scrollViewRef,\n  } = useAvatarHeader<SectionList<ItemT, SectionT>>(props);\n\n  React.useImperativeHandle(ref, () => scrollViewRef.current as SectionList<ItemT, SectionT>);\n\n  const wrapperAnimatedStyle = useAnimatedStyle(() => {\n    return {\n      backgroundColor: parseAnimatedColorProp(backgroundColor),\n    };\n  }, [backgroundColor]);\n\n  return (\n    <Animated.View style={[commonStyles.wrapper, wrapperAnimatedStyle]}>\n      {renderHeaderBar ? (\n        renderHeaderBar()\n      ) : (\n        <HeaderBar\n          backgroundColor={backgroundColor}\n          enableSafeAreaTopInset={enableSafeAreaTopInset}\n          height={parallaxHeight}\n          image={image}\n          leftTopIcon={leftTopIcon}\n          leftTopIconAccessibilityLabel={leftTopIconAccessibilityLabel}\n          leftTopIconOnPress={leftTopIconOnPress}\n          leftTopIconTestID={leftTopIconTestID}\n          rightTopIcon={rightTopIcon}\n          rightTopIconAccessibilityLabel={rightTopIconAccessibilityLabel}\n          rightTopIconOnPress={rightTopIconOnPress}\n          rightTopIconTestID={rightTopIconTestID}\n          scrollValue={scrollValue}\n          title={title}\n          titleStyle={titleStyle}\n        />\n      )}\n      <View style={commonStyles.wrapper}>\n        <StickyHeaderSectionList\n          ref={scrollViewRef}\n          {...rest}\n          contentContainerStyle={contentContainerStyle}\n          decelerationRate={decelerationRate}\n          nestedScrollEnabled={nestedScrollEnabled}\n          onMomentumScrollEnd={onMomentumScrollEnd}\n          onScrollEndDrag={onScrollEndDrag}\n          onScroll={onScroll}\n          overScrollMode={overScrollMode}\n          renderHeader={renderHeader ?? defaultRenderHeader}\n          renderSectionFooter={renderSectionFooter}\n          renderSectionHeader={renderSectionHeader}\n          scrollEventThrottle={scrollEventThrottle}\n          sections={sections}\n          stickySectionHeadersEnabled={stickySectionHeadersEnabled}\n        />\n      </View>\n    </Animated.View>\n  );\n}\n\ntype AvatarHeaderSectionListType = <ItemT, SectionT>(\n  props: AvatarHeaderSectionListProps<ItemT, SectionT> &\n    React.RefAttributes<SectionList<ItemT, SectionT>>\n) => React.ReactElement;\n\nexport const AvatarHeaderSectionList = React.forwardRef(\n  AvatarHeaderSectionListInner\n) as AvatarHeaderSectionListType;\n"]}