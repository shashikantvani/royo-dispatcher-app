{"version":3,"sources":["AvatarHeaderFlatList.tsx"],"names":["React","View","Animated","useAnimatedStyle","commonStyles","StickyHeaderFlatList","parseAnimatedColorProp","HeaderBar","useAvatarHeader","AvatarHeaderFlatListInner","props","ref","backgroundColor","contentContainerStyle","data","decelerationRate","enableSafeAreaTopInset","image","keyExtractor","leftTopIcon","leftTopIconAccessibilityLabel","leftTopIconOnPress","leftTopIconTestID","nestedScrollEnabled","overScrollMode","renderHeader","renderHeaderBar","renderItem","rightTopIcon","rightTopIconAccessibilityLabel","rightTopIconOnPress","rightTopIconTestID","scrollEventThrottle","title","titleStyle","rest","onMomentumScrollEnd","onScroll","onScrollEndDrag","parallaxHeight","defaultRenderHeader","scrollValue","scrollViewRef","useImperativeHandle","current","wrapperAnimatedStyle","wrapper","AvatarHeaderFlatList","forwardRef"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type { FlatList } from 'react-native';\nimport { View } from 'react-native';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\n\nimport { commonStyles } from '../../constants';\nimport { StickyHeaderFlatList } from '../../primitiveComponents/StickyHeaderFlatList';\nimport { parseAnimatedColorProp } from '../common/utils/parseAnimatedColorProp';\n\nimport type { AvatarHeaderFlatListProps } from './AvatarHeaderProps';\nimport { HeaderBar } from './components/HeaderBar';\nimport { useAvatarHeader } from './hooks/useAvatarHeader';\n\nfunction AvatarHeaderFlatListInner<ItemT>(\n  props: AvatarHeaderFlatListProps<ItemT>,\n  ref: React.ForwardedRef<FlatList<ItemT>>\n) {\n  const {\n    backgroundColor,\n    contentContainerStyle,\n    data,\n    decelerationRate = 'fast',\n    enableSafeAreaTopInset = true,\n    image,\n    keyExtractor,\n    leftTopIcon,\n    leftTopIconAccessibilityLabel,\n    leftTopIconOnPress,\n    leftTopIconTestID,\n    nestedScrollEnabled = true,\n    overScrollMode = 'never',\n    renderHeader,\n    renderHeaderBar,\n    renderItem,\n    rightTopIcon,\n    rightTopIconAccessibilityLabel,\n    rightTopIconOnPress,\n    rightTopIconTestID,\n    scrollEventThrottle = 16,\n    title,\n    titleStyle,\n    ...rest\n  } = props;\n  const {\n    onMomentumScrollEnd,\n    onScroll,\n    onScrollEndDrag,\n    parallaxHeight,\n    renderHeader: defaultRenderHeader,\n    scrollValue,\n    scrollViewRef,\n  } = useAvatarHeader<FlatList<ItemT>>(props);\n\n  React.useImperativeHandle(ref, () => scrollViewRef.current as FlatList<ItemT>);\n\n  const wrapperAnimatedStyle = useAnimatedStyle(() => {\n    return {\n      backgroundColor: parseAnimatedColorProp(backgroundColor),\n    };\n  }, [backgroundColor]);\n\n  return (\n    <Animated.View style={[commonStyles.wrapper, wrapperAnimatedStyle]}>\n      {renderHeaderBar ? (\n        renderHeaderBar()\n      ) : (\n        <HeaderBar\n          backgroundColor={backgroundColor}\n          enableSafeAreaTopInset={enableSafeAreaTopInset}\n          height={parallaxHeight}\n          image={image}\n          leftTopIcon={leftTopIcon}\n          leftTopIconAccessibilityLabel={leftTopIconAccessibilityLabel}\n          leftTopIconOnPress={leftTopIconOnPress}\n          leftTopIconTestID={leftTopIconTestID}\n          rightTopIcon={rightTopIcon}\n          rightTopIconAccessibilityLabel={rightTopIconAccessibilityLabel}\n          rightTopIconOnPress={rightTopIconOnPress}\n          rightTopIconTestID={rightTopIconTestID}\n          scrollValue={scrollValue}\n          title={title}\n          titleStyle={titleStyle}\n        />\n      )}\n      <View style={commonStyles.wrapper}>\n        <StickyHeaderFlatList\n          ref={scrollViewRef}\n          {...rest}\n          contentContainerStyle={contentContainerStyle}\n          data={data}\n          decelerationRate={decelerationRate}\n          keyExtractor={keyExtractor}\n          nestedScrollEnabled={nestedScrollEnabled}\n          onMomentumScrollEnd={onMomentumScrollEnd}\n          onScrollEndDrag={onScrollEndDrag}\n          onScroll={onScroll}\n          overScrollMode={overScrollMode}\n          renderHeader={renderHeader ?? defaultRenderHeader}\n          renderItem={renderItem}\n          scrollEventThrottle={scrollEventThrottle}\n        />\n      </View>\n    </Animated.View>\n  );\n}\n\ntype AvatarHeaderFlatListType = <ItemT>(\n  props: AvatarHeaderFlatListProps<ItemT> & React.RefAttributes<FlatList<ItemT>>\n) => React.ReactElement;\n\nexport const AvatarHeaderFlatList = React.forwardRef(\n  AvatarHeaderFlatListInner\n) as AvatarHeaderFlatListType;\n"]}