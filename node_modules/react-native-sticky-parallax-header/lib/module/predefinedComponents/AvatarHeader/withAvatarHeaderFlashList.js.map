{"version":3,"sources":["withAvatarHeaderFlashList.tsx"],"names":["React","View","Animated","useAnimatedStyle","commonStyles","withStickyHeaderFlashList","parseAnimatedColorProp","HeaderBar","useAvatarFlashListHeader","withAvatarHeaderFlashList","flashListComponent","StickyHeaderFlashList","forwardRef","props","ref","backgroundColor","decelerationRate","enableSafeAreaTopInset","image","leftTopIcon","leftTopIconAccessibilityLabel","leftTopIconOnPress","leftTopIconTestID","nestedScrollEnabled","overScrollMode","renderHeader","renderHeaderBar","rightTopIcon","rightTopIconAccessibilityLabel","rightTopIconOnPress","rightTopIconTestID","scrollEventThrottle","title","titleStyle","rest","onMomentumScrollEnd","onScroll","onScrollEndDrag","parallaxHeight","defaultRenderHeader","scrollValue","scrollViewRef","useImperativeHandle","current","wrapperAnimatedStyle","wrapper"],"mappings":"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","sourcesContent":["import type { FlashList, FlashListProps } from '@shopify/flash-list';\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\n\nimport { commonStyles } from '../../constants';\nimport type { StickyHeaderFlashListProps } from '../../primitiveComponents/StickyHeaderProps';\nimport { withStickyHeaderFlashList } from '../../primitiveComponents/withStickyHeaderFlashList';\nimport { parseAnimatedColorProp } from '../common/utils/parseAnimatedColorProp';\n\nimport type { AvatarHeaderFlashListProps } from './AvatarHeaderProps';\nimport { HeaderBar } from './components/HeaderBar';\nimport { useAvatarFlashListHeader } from './hooks/useAvatarFlashListHeader';\n\nexport function withAvatarHeaderFlashList<ItemT>(\n  flashListComponent: React.ComponentClass<FlashListProps<ItemT>>\n) {\n  const StickyHeaderFlashList = withStickyHeaderFlashList(\n    flashListComponent as React.ComponentClass<FlashListProps<ItemT>>\n  ) as (\n    props: StickyHeaderFlashListProps<ItemT> & React.RefAttributes<FlashList<ItemT>>\n  ) => React.ReactElement;\n\n  return React.forwardRef<FlashList<ItemT>, AvatarHeaderFlashListProps<ItemT>>((props, ref) => {\n    const {\n      backgroundColor,\n      decelerationRate = 'fast',\n      enableSafeAreaTopInset = true,\n      image,\n      leftTopIcon,\n      leftTopIconAccessibilityLabel,\n      leftTopIconOnPress,\n      leftTopIconTestID,\n      nestedScrollEnabled = true,\n      overScrollMode = 'never',\n      renderHeader,\n      renderHeaderBar,\n      rightTopIcon,\n      rightTopIconAccessibilityLabel,\n      rightTopIconOnPress,\n      rightTopIconTestID,\n      scrollEventThrottle = 16,\n      title,\n      titleStyle,\n      ...rest\n    } = props;\n    const {\n      onMomentumScrollEnd,\n      onScroll,\n      onScrollEndDrag,\n      parallaxHeight,\n      renderHeader: defaultRenderHeader,\n      scrollValue,\n      scrollViewRef,\n    } = useAvatarFlashListHeader<ItemT>(props);\n\n    React.useImperativeHandle(ref, () => scrollViewRef.current as FlashList<ItemT>);\n\n    const wrapperAnimatedStyle = useAnimatedStyle(() => {\n      return {\n        backgroundColor: parseAnimatedColorProp(backgroundColor),\n      };\n    }, [backgroundColor]);\n\n    return (\n      <Animated.View style={[commonStyles.wrapper, wrapperAnimatedStyle]}>\n        {renderHeaderBar ? (\n          renderHeaderBar()\n        ) : (\n          <HeaderBar\n            backgroundColor={backgroundColor}\n            enableSafeAreaTopInset={enableSafeAreaTopInset}\n            height={parallaxHeight}\n            image={image}\n            leftTopIcon={leftTopIcon}\n            leftTopIconAccessibilityLabel={leftTopIconAccessibilityLabel}\n            leftTopIconOnPress={leftTopIconOnPress}\n            leftTopIconTestID={leftTopIconTestID}\n            rightTopIcon={rightTopIcon}\n            rightTopIconAccessibilityLabel={rightTopIconAccessibilityLabel}\n            rightTopIconOnPress={rightTopIconOnPress}\n            rightTopIconTestID={rightTopIconTestID}\n            scrollValue={scrollValue}\n            title={title}\n            titleStyle={titleStyle}\n          />\n        )}\n        <View style={commonStyles.wrapper}>\n          <StickyHeaderFlashList\n            ref={scrollViewRef}\n            {...rest}\n            decelerationRate={decelerationRate}\n            nestedScrollEnabled={nestedScrollEnabled}\n            onMomentumScrollEnd={onMomentumScrollEnd}\n            onScrollEndDrag={onScrollEndDrag}\n            onScroll={onScroll}\n            overScrollMode={overScrollMode}\n            renderHeader={renderHeader ?? defaultRenderHeader}\n            scrollEventThrottle={scrollEventThrottle}\n          />\n        </View>\n      </Animated.View>\n    );\n  });\n}\n"]}