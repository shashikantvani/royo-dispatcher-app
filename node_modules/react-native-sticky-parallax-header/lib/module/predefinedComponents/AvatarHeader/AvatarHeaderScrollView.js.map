{"version":3,"sources":["AvatarHeaderScrollView.tsx"],"names":["React","View","Animated","useAnimatedStyle","commonStyles","StickyHeaderScrollView","parseAnimatedColorProp","HeaderBar","useAvatarHeader","AvatarHeaderScrollView","forwardRef","props","ref","backgroundColor","children","contentContainerStyle","decelerationRate","enableSafeAreaTopInset","image","leftTopIcon","leftTopIconAccessibilityLabel","leftTopIconOnPress","leftTopIconTestID","nestedScrollEnabled","overScrollMode","renderHeader","renderHeaderBar","rightTopIcon","rightTopIconAccessibilityLabel","rightTopIconOnPress","rightTopIconTestID","scrollEventThrottle","title","titleStyle","rest","onMomentumScrollEnd","onScroll","onScrollEndDrag","parallaxHeight","defaultRenderHeader","scrollValue","scrollViewRef","useImperativeHandle","current","wrapperAnimatedStyle","wrapper"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type { ScrollView } from 'react-native';\nimport { View } from 'react-native';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\n\nimport { commonStyles } from '../../constants';\nimport { StickyHeaderScrollView } from '../../primitiveComponents/StickyHeaderScrollView';\nimport { parseAnimatedColorProp } from '../common/utils/parseAnimatedColorProp';\n\nimport type { AvatarHeaderScrollViewProps } from './AvatarHeaderProps';\nimport { HeaderBar } from './components/HeaderBar';\nimport { useAvatarHeader } from './hooks/useAvatarHeader';\n\nexport const AvatarHeaderScrollView = React.forwardRef<ScrollView, AvatarHeaderScrollViewProps>(\n  (props, ref) => {\n    const {\n      backgroundColor,\n      children,\n      contentContainerStyle,\n      decelerationRate = 'fast',\n      enableSafeAreaTopInset = true,\n      image,\n      leftTopIcon,\n      leftTopIconAccessibilityLabel,\n      leftTopIconOnPress,\n      leftTopIconTestID,\n      nestedScrollEnabled = true,\n      overScrollMode = 'never',\n      renderHeader,\n      renderHeaderBar,\n      rightTopIcon,\n      rightTopIconAccessibilityLabel,\n      rightTopIconOnPress,\n      rightTopIconTestID,\n      scrollEventThrottle = 16,\n      title,\n      titleStyle,\n      ...rest\n    } = props;\n    const {\n      onMomentumScrollEnd,\n      onScroll,\n      onScrollEndDrag,\n      parallaxHeight,\n      renderHeader: defaultRenderHeader,\n      scrollValue,\n      scrollViewRef,\n    } = useAvatarHeader<ScrollView>(props);\n\n    React.useImperativeHandle(ref, () => scrollViewRef.current as ScrollView);\n\n    const wrapperAnimatedStyle = useAnimatedStyle(() => {\n      return {\n        backgroundColor: parseAnimatedColorProp(backgroundColor),\n      };\n    }, [backgroundColor]);\n\n    return (\n      <Animated.View style={[commonStyles.wrapper, wrapperAnimatedStyle]}>\n        {renderHeaderBar ? (\n          renderHeaderBar()\n        ) : (\n          <HeaderBar\n            backgroundColor={backgroundColor}\n            enableSafeAreaTopInset={enableSafeAreaTopInset}\n            height={parallaxHeight}\n            image={image}\n            leftTopIcon={leftTopIcon}\n            leftTopIconAccessibilityLabel={leftTopIconAccessibilityLabel}\n            leftTopIconOnPress={leftTopIconOnPress}\n            leftTopIconTestID={leftTopIconTestID}\n            rightTopIcon={rightTopIcon}\n            rightTopIconAccessibilityLabel={rightTopIconAccessibilityLabel}\n            rightTopIconOnPress={rightTopIconOnPress}\n            rightTopIconTestID={rightTopIconTestID}\n            scrollValue={scrollValue}\n            title={title}\n            titleStyle={titleStyle}\n          />\n        )}\n        <View style={commonStyles.wrapper}>\n          <StickyHeaderScrollView\n            ref={scrollViewRef}\n            {...rest}\n            contentContainerStyle={contentContainerStyle}\n            decelerationRate={decelerationRate}\n            nestedScrollEnabled={nestedScrollEnabled}\n            onMomentumScrollEnd={onMomentumScrollEnd}\n            onScrollEndDrag={onScrollEndDrag}\n            onScroll={onScroll}\n            overScrollMode={overScrollMode}\n            renderHeader={renderHeader ?? defaultRenderHeader}\n            scrollEventThrottle={scrollEventThrottle}>\n            {children}\n          </StickyHeaderScrollView>\n        </View>\n      </Animated.View>\n    );\n  }\n);\n"]}