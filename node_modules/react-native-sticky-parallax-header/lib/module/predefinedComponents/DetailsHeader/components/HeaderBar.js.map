{"version":3,"sources":["HeaderBar.tsx"],"names":["React","Pressable","StyleSheet","Animated","useAnimatedStyle","SafeAreaView","colors","commonStyles","IconRenderer","parseAnimatedColorProp","HIT_SLOP","top","left","bottom","right","HeaderBar","backgroundColor","enableSafeAreaTopInset","headerTitleContainerAnimatedStyle","leftTopIcon","leftTopIconAccessibilityLabel","leftTopIconOnPress","leftTopIconTestID","rightTopIcon","rightTopIconAccessibilityLabel","rightTopIconOnPress","rightTopIconTestID","title","titleStyle","titleTestID","wrapperAnimatedStyle","safeAreaEdges","push","container","headerWrapper","styles","leftHeaderButton","headerTitleContainer","headerTitle","rightHeaderButton","create","color","white","fontSize","lineHeight","paddingHorizontal","textAlign","alignItems","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type { StyleProp, TextStyle } from 'react-native';\nimport { Pressable, StyleSheet } from 'react-native';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\nimport type { Edge } from 'react-native-safe-area-context';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nimport { colors, commonStyles } from '../../../constants';\nimport type { AnimatedColorProp, IconProps } from '../../common/SharedProps';\nimport IconRenderer from '../../common/components/IconRenderer';\nimport { parseAnimatedColorProp } from '../../common/utils/parseAnimatedColorProp';\n\ninterface HeaderBarProps extends IconProps {\n  backgroundColor?: AnimatedColorProp;\n  enableSafeAreaTopInset?: boolean;\n  headerTitleContainerAnimatedStyle: { opacity: number };\n  title?: string;\n  titleStyle?: StyleProp<Animated.AnimateStyle<TextStyle>>;\n  titleTestID?: string;\n}\n\nconst HIT_SLOP = {\n  top: 15,\n  left: 15,\n  bottom: 15,\n  right: 15,\n};\n\nexport const HeaderBar: React.FC<HeaderBarProps> = ({\n  backgroundColor,\n  enableSafeAreaTopInset,\n  headerTitleContainerAnimatedStyle,\n  leftTopIcon,\n  leftTopIconAccessibilityLabel,\n  leftTopIconOnPress,\n  leftTopIconTestID,\n  rightTopIcon,\n  rightTopIconAccessibilityLabel,\n  rightTopIconOnPress,\n  rightTopIconTestID,\n  title,\n  titleStyle,\n  titleTestID = 'DetailsHeaderBarTitleTestID',\n}) => {\n  const wrapperAnimatedStyle = useAnimatedStyle(() => {\n    return {\n      // TypeScript complains about AnimatedNode<StyleProp<ViewStyle>> from reanimated v1\n      backgroundColor: parseAnimatedColorProp(backgroundColor) as string,\n    };\n  }, [backgroundColor]);\n  const safeAreaEdges: Edge[] = ['left', 'right'];\n\n  if (enableSafeAreaTopInset) {\n    safeAreaEdges.push('top');\n  }\n\n  return (\n    <SafeAreaView edges={safeAreaEdges} style={commonStyles.container}>\n      <Animated.View style={[commonStyles.headerWrapper, wrapperAnimatedStyle]}>\n        {leftTopIcon ? (\n          <Pressable\n            accessibilityLabel={leftTopIconAccessibilityLabel}\n            accessibilityRole=\"button\"\n            hitSlop={HIT_SLOP}\n            onPress={leftTopIconOnPress}\n            style={styles.leftHeaderButton}\n            testID={leftTopIconTestID}>\n            <IconRenderer icon={leftTopIcon} />\n          </Pressable>\n        ) : null}\n        <Animated.View style={[styles.headerTitleContainer, headerTitleContainerAnimatedStyle]}>\n          <Animated.Text style={[styles.headerTitle, titleStyle]} testID={titleTestID}>\n            {title}\n          </Animated.Text>\n        </Animated.View>\n        {rightTopIcon ? (\n          <Pressable\n            accessibilityLabel={rightTopIconAccessibilityLabel}\n            accessibilityRole=\"button\"\n            hitSlop={HIT_SLOP}\n            onPress={rightTopIconOnPress}\n            style={styles.rightHeaderButton}\n            testID={rightTopIconTestID}>\n            <IconRenderer icon={rightTopIcon} />\n          </Pressable>\n        ) : null}\n      </Animated.View>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  headerTitle: {\n    color: colors.white,\n    fontSize: 16,\n    lineHeight: 20,\n    paddingHorizontal: 12,\n    textAlign: 'left',\n  },\n  headerTitleContainer: {\n    alignItems: 'flex-start',\n    flex: 8,\n  },\n  leftHeaderButton: {\n    alignItems: 'flex-start',\n    flex: 1,\n  },\n  rightHeaderButton: {\n    flex: 1,\n    alignItems: 'flex-end',\n  },\n});\n"]}