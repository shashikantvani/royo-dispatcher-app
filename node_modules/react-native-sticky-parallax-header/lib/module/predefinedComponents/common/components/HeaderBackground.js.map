{"version":3,"sources":["HeaderBackground.tsx"],"names":["React","StyleSheet","Animated","Extrapolate","interpolate","useAnimatedStyle","parseAnimatedColorProp","HeaderBackground","backgroundColor","hasBorderRadius","height","scrollValue","animatedStyle","animatedBackgroundColor","borderBottomEndRadius","value","EXTEND","styles","background","create","alignItems","alignSelf","flex","justifyContent","zIndex"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,OAAOC,QAAP,IAAmBC,WAAnB,EAAgCC,WAAhC,EAA6CC,gBAA7C,QAAqE,yBAArE;AAGA,SAASC,sBAAT,QAAuC,iCAAvC;AASA,OAAO,MAAMC,gBAAiD,GAAG,CAAC;AAChEC,EAAAA,eADgE;AAEhEC,EAAAA,eAFgE;AAGhEC,EAAAA,MAHgE;AAIhEC,EAAAA;AAJgE,CAAD,KAK3D;AACJ,QAAMC,aAAa,GAAGP,gBAAgB,CAAC,MAAM;AAC3C,UAAMQ,uBAAuB,GAAGP,sBAAsB,CAACE,eAAD,CAAtD;;AAEA,QAAI,CAACC,eAAL,EAAsB;AACpB,aAAO;AAAED,QAAAA,eAAe,EAAEK,uBAAnB;AAA4CC,QAAAA,qBAAqB,EAAE;AAAnE,OAAP;AACD;;AAED,WAAO;AACLN,MAAAA,eAAe,EAAEK,uBADZ;AAELC,MAAAA,qBAAqB,EAAEV,WAAW,CAChCO,WAAW,CAACI,KADoB,EAEhC,CAAC,CAAD,EAAIL,MAAJ,CAFgC,EAGhC,CAAC,EAAD,EAAK,CAAL,CAHgC,EAIhCP,WAAW,CAACa,MAJoB;AAF7B,KAAP;AASD,GAhBqC,EAgBnC,CAACR,eAAD,EAAkBC,eAAlB,EAAmCE,WAAnC,EAAgDD,MAAhD,CAhBmC,CAAtC;AAkBA,sBACE,oBAAC,QAAD,CAAU,IAAV;AACE,IAAA,aAAa,EAAC,MADhB;AAEE,IAAA,KAAK,EAAE,CAACO,MAAM,CAACC,UAAR,EAAoBN,aAApB,CAFT;AAGE,IAAA,MAAM,EAAC;AAHT,IADF;AAOD,CA/BM;AAiCP,MAAMK,MAAM,GAAGhB,UAAU,CAACkB,MAAX,CAAkB;AAC/BD,EAAAA,UAAU,EAAE;AACVE,IAAAA,UAAU,EAAE,YADF;AAEVC,IAAAA,SAAS,EAAE,SAFD;AAGVC,IAAAA,IAAI,EAAE,CAHI;AAIVC,IAAAA,cAAc,EAAE,UAJN;AAKVC,IAAAA,MAAM,EAAE,CAAC;AALC;AADmB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport Animated, { Extrapolate, interpolate, useAnimatedStyle } from 'react-native-reanimated';\n\nimport type { AnimatedColorProp } from '../SharedProps';\nimport { parseAnimatedColorProp } from '../utils/parseAnimatedColorProp';\n\ninterface HeaderBackgroundProps {\n  backgroundColor?: AnimatedColorProp;\n  hasBorderRadius?: boolean;\n  height: number;\n  scrollValue: Animated.SharedValue<number>;\n}\n\nexport const HeaderBackground: React.FC<HeaderBackgroundProps> = ({\n  backgroundColor,\n  hasBorderRadius,\n  height,\n  scrollValue,\n}) => {\n  const animatedStyle = useAnimatedStyle(() => {\n    const animatedBackgroundColor = parseAnimatedColorProp(backgroundColor);\n\n    if (!hasBorderRadius) {\n      return { backgroundColor: animatedBackgroundColor, borderBottomEndRadius: 0 };\n    }\n\n    return {\n      backgroundColor: animatedBackgroundColor,\n      borderBottomEndRadius: interpolate(\n        scrollValue.value,\n        [0, height],\n        [80, 0],\n        Extrapolate.EXTEND\n      ),\n    };\n  }, [backgroundColor, hasBorderRadius, scrollValue, height]);\n\n  return (\n    <Animated.View\n      pointerEvents=\"none\"\n      style={[styles.background, animatedStyle]}\n      testID=\"HeaderBackground\"\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  background: {\n    alignItems: 'flex-start',\n    alignSelf: 'stretch',\n    flex: 1,\n    justifyContent: 'flex-end',\n    zIndex: -1,\n  },\n});\n"]}