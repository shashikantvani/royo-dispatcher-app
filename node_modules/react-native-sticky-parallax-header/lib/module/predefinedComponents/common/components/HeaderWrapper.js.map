{"version":3,"sources":["HeaderWrapper.tsx"],"names":["React","StyleSheet","View","useWindowDimensions","Animated","useAnimatedStyle","colors","parseAnimatedColorProp","HeaderBackground","HeaderBackgroundImage","HeaderWrapper","backgroundColor","backgroundImage","children","contentBackgroundColor","hasBorderRadius","parallaxHeight","scrollHeight","scrollValue","tabsContainerBackgroundColor","width","hasBackgroundImage","contentAnimatedStyle","foregroundAnimatedStyle","transparent","styles","headerStyle","height","create","position","left","top","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type { ImageSourcePropType } from 'react-native';\nimport { StyleSheet, View, useWindowDimensions } from 'react-native';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\n\nimport { colors } from '../../../constants';\nimport type { AnimatedColorProp } from '../SharedProps';\nimport { parseAnimatedColorProp } from '../utils/parseAnimatedColorProp';\n\nimport { HeaderBackground } from './HeaderBackground';\nimport { HeaderBackgroundImage } from './HeaderBackgroundImage';\n\ninterface HeaderWrapperProps {\n  backgroundColor?: AnimatedColorProp;\n  backgroundImage?: ImageSourcePropType;\n  contentBackgroundColor?: AnimatedColorProp;\n  hasBorderRadius?: boolean;\n  parallaxHeight: number;\n  scrollHeight: number;\n  scrollValue: Animated.SharedValue<number>;\n  tabsContainerBackgroundColor?: AnimatedColorProp;\n}\n\nexport const HeaderWrapper: React.FC<React.PropsWithChildren<HeaderWrapperProps>> = ({\n  backgroundColor,\n  backgroundImage,\n  children,\n  contentBackgroundColor,\n  hasBorderRadius,\n  parallaxHeight,\n  scrollHeight,\n  scrollValue,\n  tabsContainerBackgroundColor,\n}) => {\n  const { width } = useWindowDimensions();\n  const hasBackgroundImage = !!backgroundImage;\n  const contentAnimatedStyle = useAnimatedStyle(() => {\n    // TypeScript complains about AnimatedNode<StyleProp<ViewStyle>> from reanimated v1\n    return { backgroundColor: parseAnimatedColorProp(contentBackgroundColor) as string };\n  }, [contentBackgroundColor]);\n  const foregroundAnimatedStyle = useAnimatedStyle(() => {\n    if (hasBackgroundImage) {\n      return { backgroundColor: colors.transparent };\n    }\n\n    return {\n      backgroundColor: parseAnimatedColorProp(tabsContainerBackgroundColor),\n    };\n  }, [hasBackgroundImage, tabsContainerBackgroundColor]);\n\n  return (\n    <Animated.View pointerEvents=\"box-none\" style={contentAnimatedStyle}>\n      {backgroundImage ? (\n        <View pointerEvents=\"none\">\n          <HeaderBackgroundImage\n            background={\n              <HeaderBackground\n                backgroundColor={backgroundColor}\n                hasBorderRadius={hasBorderRadius}\n                height={parallaxHeight}\n                scrollValue={scrollValue}\n              />\n            }\n            backgroundHeight={scrollHeight}\n            backgroundImage={backgroundImage}\n          />\n        </View>\n      ) : (\n        <View\n          pointerEvents=\"none\"\n          style={[styles.headerStyle, { height: scrollHeight }, { width }]}>\n          <HeaderBackground\n            backgroundColor={backgroundColor}\n            hasBorderRadius={hasBorderRadius}\n            height={parallaxHeight}\n            scrollValue={scrollValue}\n          />\n        </View>\n      )}\n      <Animated.View\n        pointerEvents=\"box-none\"\n        style={[\n          {\n            height: scrollHeight,\n          },\n          foregroundAnimatedStyle,\n        ]}\n        testID=\"HeaderForeground\">\n        {children}\n      </Animated.View>\n    </Animated.View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  headerStyle: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    alignItems: 'flex-start',\n    justifyContent: 'flex-end',\n  },\n});\n"]}