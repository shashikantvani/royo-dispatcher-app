{"version":3,"sources":["useStickyHeaderProps.ts"],"names":["useMemo","useState","StyleSheet","Extrapolate","interpolate","useAnimatedScrollHandler","useAnimatedStyle","useSharedValue","useStickyHeaderProps","props","contentContainerStyle","onHeaderLayout","onMomentumScrollBegin","onMomentumScrollEnd","onScroll","onScrollBeginDrag","onScrollEndDrag","onTabsLayout","stickyTabs","style","headerHeight","setHeaderHeight","tabsHeight","setTabsHeight","scrollValue","onHeaderLayoutInternal","e","nativeEvent","layout","height","onTabsLayoutInternal","scrollHandler","onBeginDrag","onEndDrag","onMomentumBegin","onMomentumEnd","value","contentOffset","y","contentContainerPaddingTop","paddingTop","flatten","contentContainerPaddingBottom","paddingBottom","listPaddingTop","headerAnimatedStyle","transform","translateY","CLAMP","EXTEND"],"mappings":"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","sourcesContent":["import { useMemo, useState } from 'react';\nimport type { LayoutChangeEvent } from 'react-native';\nimport { StyleSheet } from 'react-native';\nimport {\n  Extrapolate,\n  interpolate,\n  useAnimatedScrollHandler,\n  useAnimatedStyle,\n  useSharedValue,\n} from 'react-native-reanimated';\n\nimport type {\n  StickyHeaderFlatListProps,\n  StickyHeaderScrollViewProps,\n  StickyHeaderSectionListProps,\n} from './StickyHeaderProps';\n\nexport function useStickyHeaderProps(\n  props:\n    | StickyHeaderFlatListProps<unknown>\n    | StickyHeaderScrollViewProps\n    | StickyHeaderSectionListProps<unknown, unknown>\n) {\n  const {\n    contentContainerStyle,\n    onHeaderLayout,\n    onMomentumScrollBegin,\n    onMomentumScrollEnd,\n    onScroll,\n    onScrollBeginDrag,\n    onScrollEndDrag,\n    onTabsLayout,\n    stickyTabs = true,\n    style,\n  } = props;\n\n  const [headerHeight, setHeaderHeight] = useState(0);\n  const [tabsHeight, setTabsHeight] = useState(0);\n\n  const scrollValue = useSharedValue(0);\n\n  function onHeaderLayoutInternal(e: LayoutChangeEvent) {\n    setHeaderHeight(e.nativeEvent.layout.height);\n    onHeaderLayout?.(e);\n  }\n\n  function onTabsLayoutInternal(e: LayoutChangeEvent) {\n    setTabsHeight(e.nativeEvent.layout.height);\n    onTabsLayout?.(e);\n  }\n\n  const scrollHandler = useAnimatedScrollHandler({\n    onBeginDrag: (e) => {\n      onScrollBeginDrag?.(e);\n    },\n    onEndDrag: (e) => {\n      onScrollEndDrag?.(e);\n    },\n    onMomentumBegin: (e) => {\n      onMomentumScrollBegin?.(e);\n    },\n    onMomentumEnd: (e) => {\n      onMomentumScrollEnd?.(e);\n    },\n    onScroll: (e) => {\n      scrollValue.value = e.contentOffset.y;\n      onScroll?.(e);\n    },\n  });\n\n  const contentContainerPaddingTop = useMemo(() => {\n    const paddingTop = StyleSheet.flatten(contentContainerStyle)?.paddingTop;\n\n    if (typeof paddingTop === 'number') {\n      return paddingTop;\n    }\n\n    // We do not support string values\n    return 0;\n  }, [contentContainerStyle]);\n\n  const contentContainerPaddingBottom = useMemo(() => {\n    const paddingBottom = StyleSheet.flatten(contentContainerStyle)?.paddingBottom;\n\n    if (typeof paddingBottom === 'number') {\n      return paddingBottom;\n    }\n\n    // We do not support string values\n    return 0;\n  }, [contentContainerStyle]);\n\n  const listPaddingTop = useMemo(() => {\n    const paddingTop = StyleSheet.flatten(style)?.paddingTop;\n\n    if (typeof paddingTop === 'number') {\n      return paddingTop;\n    }\n\n    // We do not support string values\n    return 0;\n  }, [style]);\n\n  const headerAnimatedStyle = useAnimatedStyle(() => {\n    return {\n      transform: [\n        {\n          translateY: interpolate(\n            scrollValue.value,\n            [0, headerHeight],\n            [0, -headerHeight],\n            stickyTabs ? Extrapolate.CLAMP : Extrapolate.EXTEND\n          ),\n        },\n      ],\n    };\n  }, [scrollValue, headerHeight, stickyTabs]);\n\n  return {\n    contentContainerPaddingTop,\n    contentContainerPaddingBottom,\n    headerAnimatedStyle,\n    headerHeight,\n    listPaddingTop,\n    onHeaderLayoutInternal,\n    onTabsLayoutInternal,\n    scrollHandler,\n    tabsHeight,\n  };\n}\n"]}