{"version":3,"sources":["HeaderBackground.tsx"],"names":["HeaderBackground","backgroundColor","hasBorderRadius","height","scrollValue","animatedStyle","animatedBackgroundColor","borderBottomEndRadius","value","Extrapolate","EXTEND","styles","background","StyleSheet","create","alignItems","alignSelf","flex","justifyContent","zIndex"],"mappings":"yFAAA,oDACA,yCACA,uFAGA,uE,2mCASO,GAAMA,CAAAA,gBAAiD,CAAG,QAApDA,CAAAA,gBAAoD,MAK3D,IAJJC,CAAAA,eAII,MAJJA,eAII,CAHJC,eAGI,MAHJA,eAGI,CAFJC,MAEI,MAFJA,MAEI,CADJC,WACI,MADJA,WACI,CACJ,GAAMC,CAAAA,aAAa,CAAG,4CAAiB,UAAM,CAC3C,GAAMC,CAAAA,uBAAuB,CAAG,mDAAuBL,eAAvB,CAAhC,CAEA,GAAI,CAACC,eAAL,CAAsB,CACpB,MAAO,CAAED,eAAe,CAAEK,uBAAnB,CAA4CC,qBAAqB,CAAE,CAAnE,CAAP,CACD,CAED,MAAO,CACLN,eAAe,CAAEK,uBADZ,CAELC,qBAAqB,CAAE,uCACrBH,WAAW,CAACI,KADS,CAErB,CAAC,CAAD,CAAIL,MAAJ,CAFqB,CAGrB,CAAC,EAAD,CAAK,CAAL,CAHqB,CAIrBM,mCAAYC,MAJS,CAFlB,CAAP,CASD,CAhBqB,CAgBnB,CAACT,eAAD,CAAkBC,eAAlB,CAAmCE,WAAnC,CAAgDD,MAAhD,CAhBmB,CAAtB,CAkBA,MACE,qBAAC,8BAAD,CAAU,IAAV,EACE,aAAa,CAAC,MADhB,CAEE,KAAK,CAAE,CAACQ,MAAM,CAACC,UAAR,CAAoBP,aAApB,CAFT,CAGE,MAAM,CAAC,kBAHT,6EADF,CAOD,CA/BM,C,0CAiCP,GAAMM,CAAAA,MAAM,CAAGE,wBAAWC,MAAX,CAAkB,CAC/BF,UAAU,CAAE,CACVG,UAAU,CAAE,YADF,CAEVC,SAAS,CAAE,SAFD,CAGVC,IAAI,CAAE,CAHI,CAIVC,cAAc,CAAE,UAJN,CAKVC,MAAM,CAAE,CAAC,CALC,CADmB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport Animated, { Extrapolate, interpolate, useAnimatedStyle } from 'react-native-reanimated';\n\nimport type { AnimatedColorProp } from '../SharedProps';\nimport { parseAnimatedColorProp } from '../utils/parseAnimatedColorProp';\n\ninterface HeaderBackgroundProps {\n  backgroundColor?: AnimatedColorProp;\n  hasBorderRadius?: boolean;\n  height: number;\n  scrollValue: Animated.SharedValue<number>;\n}\n\nexport const HeaderBackground: React.FC<HeaderBackgroundProps> = ({\n  backgroundColor,\n  hasBorderRadius,\n  height,\n  scrollValue,\n}) => {\n  const animatedStyle = useAnimatedStyle(() => {\n    const animatedBackgroundColor = parseAnimatedColorProp(backgroundColor);\n\n    if (!hasBorderRadius) {\n      return { backgroundColor: animatedBackgroundColor, borderBottomEndRadius: 0 };\n    }\n\n    return {\n      backgroundColor: animatedBackgroundColor,\n      borderBottomEndRadius: interpolate(\n        scrollValue.value,\n        [0, height],\n        [80, 0],\n        Extrapolate.EXTEND\n      ),\n    };\n  }, [backgroundColor, hasBorderRadius, scrollValue, height]);\n\n  return (\n    <Animated.View\n      pointerEvents=\"none\"\n      style={[styles.background, animatedStyle]}\n      testID=\"HeaderBackground\"\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  background: {\n    alignItems: 'flex-start',\n    alignSelf: 'stretch',\n    flex: 1,\n    justifyContent: 'flex-end',\n    zIndex: -1,\n  },\n});\n"]}