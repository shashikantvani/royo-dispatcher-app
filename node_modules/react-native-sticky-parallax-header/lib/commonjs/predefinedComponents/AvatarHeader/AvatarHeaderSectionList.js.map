{"version":3,"sources":["AvatarHeaderSectionList.tsx"],"names":["AvatarHeaderSectionListInner","props","ref","backgroundColor","contentContainerStyle","decelerationRate","enableSafeAreaTopInset","image","leftTopIcon","leftTopIconAccessibilityLabel","leftTopIconOnPress","leftTopIconTestID","nestedScrollEnabled","overScrollMode","renderHeader","renderHeaderBar","renderSectionFooter","renderSectionHeader","rightTopIcon","rightTopIconAccessibilityLabel","rightTopIconOnPress","rightTopIconTestID","scrollEventThrottle","sections","stickySectionHeadersEnabled","title","titleStyle","rest","onMomentumScrollEnd","onScroll","onScrollEndDrag","parallaxHeight","defaultRenderHeader","scrollValue","scrollViewRef","React","useImperativeHandle","current","wrapperAnimatedStyle","commonStyles","wrapper","AvatarHeaderSectionList","forwardRef"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type { SectionList } from 'react-native';\nimport { View } from 'react-native';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\n\nimport { commonStyles } from '../../constants';\nimport { StickyHeaderSectionList } from '../../primitiveComponents/StickyHeaderSectionList';\nimport { parseAnimatedColorProp } from '../common/utils/parseAnimatedColorProp';\n\nimport type { AvatarHeaderSectionListProps } from './AvatarHeaderProps';\nimport { HeaderBar } from './components/HeaderBar';\nimport { useAvatarHeader } from './hooks/useAvatarHeader';\n\nfunction AvatarHeaderSectionListInner<ItemT, SectionT>(\n  props: AvatarHeaderSectionListProps<ItemT, SectionT>,\n  ref: React.ForwardedRef<SectionList<ItemT, SectionT>>\n) {\n  const {\n    backgroundColor,\n    contentContainerStyle,\n    decelerationRate = 'fast',\n    enableSafeAreaTopInset = true,\n    image,\n    leftTopIcon,\n    leftTopIconAccessibilityLabel,\n    leftTopIconOnPress,\n    leftTopIconTestID,\n    nestedScrollEnabled = true,\n    overScrollMode = 'never',\n    renderHeader,\n    renderHeaderBar,\n    renderSectionFooter,\n    renderSectionHeader,\n    rightTopIcon,\n    rightTopIconAccessibilityLabel,\n    rightTopIconOnPress,\n    rightTopIconTestID,\n    scrollEventThrottle = 16,\n    sections,\n    stickySectionHeadersEnabled = true,\n    title,\n    titleStyle,\n    ...rest\n  } = props;\n  const {\n    onMomentumScrollEnd,\n    onScroll,\n    onScrollEndDrag,\n    parallaxHeight,\n    renderHeader: defaultRenderHeader,\n    scrollValue,\n    scrollViewRef,\n  } = useAvatarHeader<SectionList<ItemT, SectionT>>(props);\n\n  React.useImperativeHandle(ref, () => scrollViewRef.current as SectionList<ItemT, SectionT>);\n\n  const wrapperAnimatedStyle = useAnimatedStyle(() => {\n    return {\n      backgroundColor: parseAnimatedColorProp(backgroundColor),\n    };\n  }, [backgroundColor]);\n\n  return (\n    <Animated.View style={[commonStyles.wrapper, wrapperAnimatedStyle]}>\n      {renderHeaderBar ? (\n        renderHeaderBar()\n      ) : (\n        <HeaderBar\n          backgroundColor={backgroundColor}\n          enableSafeAreaTopInset={enableSafeAreaTopInset}\n          height={parallaxHeight}\n          image={image}\n          leftTopIcon={leftTopIcon}\n          leftTopIconAccessibilityLabel={leftTopIconAccessibilityLabel}\n          leftTopIconOnPress={leftTopIconOnPress}\n          leftTopIconTestID={leftTopIconTestID}\n          rightTopIcon={rightTopIcon}\n          rightTopIconAccessibilityLabel={rightTopIconAccessibilityLabel}\n          rightTopIconOnPress={rightTopIconOnPress}\n          rightTopIconTestID={rightTopIconTestID}\n          scrollValue={scrollValue}\n          title={title}\n          titleStyle={titleStyle}\n        />\n      )}\n      <View style={commonStyles.wrapper}>\n        <StickyHeaderSectionList\n          ref={scrollViewRef}\n          {...rest}\n          contentContainerStyle={contentContainerStyle}\n          decelerationRate={decelerationRate}\n          nestedScrollEnabled={nestedScrollEnabled}\n          onMomentumScrollEnd={onMomentumScrollEnd}\n          onScrollEndDrag={onScrollEndDrag}\n          onScroll={onScroll}\n          overScrollMode={overScrollMode}\n          renderHeader={renderHeader ?? defaultRenderHeader}\n          renderSectionFooter={renderSectionFooter}\n          renderSectionHeader={renderSectionHeader}\n          scrollEventThrottle={scrollEventThrottle}\n          sections={sections}\n          stickySectionHeadersEnabled={stickySectionHeadersEnabled}\n        />\n      </View>\n    </Animated.View>\n  );\n}\n\ntype AvatarHeaderSectionListType = <ItemT, SectionT>(\n  props: AvatarHeaderSectionListProps<ItemT, SectionT> &\n    React.RefAttributes<SectionList<ItemT, SectionT>>\n) => React.ReactElement;\n\nexport const AvatarHeaderSectionList = React.forwardRef(\n  AvatarHeaderSectionListInner\n) as AvatarHeaderSectionListType;\n"]}