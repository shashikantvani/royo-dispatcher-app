{"version":3,"sources":["withAvatarHeaderFlashList.tsx"],"names":["withAvatarHeaderFlashList","flashListComponent","StickyHeaderFlashList","React","forwardRef","props","ref","backgroundColor","decelerationRate","enableSafeAreaTopInset","image","leftTopIcon","leftTopIconAccessibilityLabel","leftTopIconOnPress","leftTopIconTestID","nestedScrollEnabled","overScrollMode","renderHeader","renderHeaderBar","rightTopIcon","rightTopIconAccessibilityLabel","rightTopIconOnPress","rightTopIconTestID","scrollEventThrottle","title","titleStyle","rest","onMomentumScrollEnd","onScroll","onScrollEndDrag","parallaxHeight","defaultRenderHeader","scrollValue","scrollViewRef","useImperativeHandle","current","wrapperAnimatedStyle","commonStyles","wrapper"],"mappings":"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","sourcesContent":["import type { FlashList, FlashListProps } from '@shopify/flash-list';\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\n\nimport { commonStyles } from '../../constants';\nimport type { StickyHeaderFlashListProps } from '../../primitiveComponents/StickyHeaderProps';\nimport { withStickyHeaderFlashList } from '../../primitiveComponents/withStickyHeaderFlashList';\nimport { parseAnimatedColorProp } from '../common/utils/parseAnimatedColorProp';\n\nimport type { AvatarHeaderFlashListProps } from './AvatarHeaderProps';\nimport { HeaderBar } from './components/HeaderBar';\nimport { useAvatarFlashListHeader } from './hooks/useAvatarFlashListHeader';\n\nexport function withAvatarHeaderFlashList<ItemT>(\n  flashListComponent: React.ComponentClass<FlashListProps<ItemT>>\n) {\n  const StickyHeaderFlashList = withStickyHeaderFlashList(\n    flashListComponent as React.ComponentClass<FlashListProps<ItemT>>\n  ) as (\n    props: StickyHeaderFlashListProps<ItemT> & React.RefAttributes<FlashList<ItemT>>\n  ) => React.ReactElement;\n\n  return React.forwardRef<FlashList<ItemT>, AvatarHeaderFlashListProps<ItemT>>((props, ref) => {\n    const {\n      backgroundColor,\n      decelerationRate = 'fast',\n      enableSafeAreaTopInset = true,\n      image,\n      leftTopIcon,\n      leftTopIconAccessibilityLabel,\n      leftTopIconOnPress,\n      leftTopIconTestID,\n      nestedScrollEnabled = true,\n      overScrollMode = 'never',\n      renderHeader,\n      renderHeaderBar,\n      rightTopIcon,\n      rightTopIconAccessibilityLabel,\n      rightTopIconOnPress,\n      rightTopIconTestID,\n      scrollEventThrottle = 16,\n      title,\n      titleStyle,\n      ...rest\n    } = props;\n    const {\n      onMomentumScrollEnd,\n      onScroll,\n      onScrollEndDrag,\n      parallaxHeight,\n      renderHeader: defaultRenderHeader,\n      scrollValue,\n      scrollViewRef,\n    } = useAvatarFlashListHeader<ItemT>(props);\n\n    React.useImperativeHandle(ref, () => scrollViewRef.current as FlashList<ItemT>);\n\n    const wrapperAnimatedStyle = useAnimatedStyle(() => {\n      return {\n        backgroundColor: parseAnimatedColorProp(backgroundColor),\n      };\n    }, [backgroundColor]);\n\n    return (\n      <Animated.View style={[commonStyles.wrapper, wrapperAnimatedStyle]}>\n        {renderHeaderBar ? (\n          renderHeaderBar()\n        ) : (\n          <HeaderBar\n            backgroundColor={backgroundColor}\n            enableSafeAreaTopInset={enableSafeAreaTopInset}\n            height={parallaxHeight}\n            image={image}\n            leftTopIcon={leftTopIcon}\n            leftTopIconAccessibilityLabel={leftTopIconAccessibilityLabel}\n            leftTopIconOnPress={leftTopIconOnPress}\n            leftTopIconTestID={leftTopIconTestID}\n            rightTopIcon={rightTopIcon}\n            rightTopIconAccessibilityLabel={rightTopIconAccessibilityLabel}\n            rightTopIconOnPress={rightTopIconOnPress}\n            rightTopIconTestID={rightTopIconTestID}\n            scrollValue={scrollValue}\n            title={title}\n            titleStyle={titleStyle}\n          />\n        )}\n        <View style={commonStyles.wrapper}>\n          <StickyHeaderFlashList\n            ref={scrollViewRef}\n            {...rest}\n            decelerationRate={decelerationRate}\n            nestedScrollEnabled={nestedScrollEnabled}\n            onMomentumScrollEnd={onMomentumScrollEnd}\n            onScrollEndDrag={onScrollEndDrag}\n            onScroll={onScroll}\n            overScrollMode={overScrollMode}\n            renderHeader={renderHeader ?? defaultRenderHeader}\n            scrollEventThrottle={scrollEventThrottle}\n          />\n        </View>\n      </Animated.View>\n    );\n  });\n}\n"]}