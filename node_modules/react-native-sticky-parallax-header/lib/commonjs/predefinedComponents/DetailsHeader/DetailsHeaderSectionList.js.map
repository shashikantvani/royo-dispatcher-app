{"version":3,"sources":["DetailsHeaderSectionList.tsx"],"names":["DetailsHeaderSectionListInner","props","ref","backgroundColor","contentContainerStyle","decelerationRate","enableSafeAreaTopInset","leftTopIcon","leftTopIconAccessibilityLabel","leftTopIconOnPress","leftTopIconTestID","nestedScrollEnabled","overScrollMode","renderHeader","renderHeaderBar","renderSectionFooter","renderSectionHeader","rightTopIcon","rightTopIconAccessibilityLabel","rightTopIconOnPress","rightTopIconTestID","scrollEventThrottle","sections","stickySectionHeadersEnabled","title","titleStyle","rest","headerTitleContainerAnimatedStyle","onScroll","onScrollEndDrag","onMomentumScrollEnd","defaultRenderHeader","scrollViewRef","React","useImperativeHandle","current","wrapperAnimatedStyle","commonStyles","container","DetailsHeaderSectionList","forwardRef"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type { SectionList } from 'react-native';\nimport { View } from 'react-native';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\n\nimport { commonStyles } from '../../constants';\nimport { StickyHeaderSectionList } from '../../primitiveComponents/StickyHeaderSectionList';\nimport { parseAnimatedColorProp } from '../common/utils/parseAnimatedColorProp';\n\nimport type { DetailsHeaderSectionListProps } from './DetailsHeaderProps';\nimport { HeaderBar } from './components/HeaderBar';\nimport { useDetailsHeader } from './hooks/useDetailsHeader';\n\nfunction DetailsHeaderSectionListInner<ItemT, SectionT>(\n  props: DetailsHeaderSectionListProps<ItemT, SectionT>,\n  ref: React.ForwardedRef<SectionList<ItemT, SectionT>>\n) {\n  const {\n    backgroundColor,\n    contentContainerStyle,\n    decelerationRate = 'fast',\n    enableSafeAreaTopInset = true,\n    leftTopIcon,\n    leftTopIconAccessibilityLabel,\n    leftTopIconOnPress,\n    leftTopIconTestID,\n    nestedScrollEnabled = true,\n    overScrollMode = 'never',\n    renderHeader,\n    renderHeaderBar,\n    renderSectionFooter,\n    renderSectionHeader,\n    rightTopIcon,\n    rightTopIconAccessibilityLabel,\n    rightTopIconOnPress,\n    rightTopIconTestID,\n    scrollEventThrottle = 16,\n    sections,\n    stickySectionHeadersEnabled = true,\n    title,\n    titleStyle,\n    ...rest\n  } = props;\n  const {\n    headerTitleContainerAnimatedStyle,\n    onScroll,\n    onScrollEndDrag,\n    onMomentumScrollEnd,\n    renderHeader: defaultRenderHeader,\n    scrollViewRef,\n  } = useDetailsHeader<SectionList<ItemT, SectionT>>(props);\n\n  React.useImperativeHandle(ref, () => scrollViewRef.current as SectionList<ItemT, SectionT>);\n\n  const wrapperAnimatedStyle = useAnimatedStyle(() => {\n    return {\n      backgroundColor: parseAnimatedColorProp(backgroundColor),\n    };\n  }, [backgroundColor]);\n\n  return (\n    <Animated.View style={[commonStyles.container, wrapperAnimatedStyle]}>\n      {renderHeaderBar ? (\n        renderHeaderBar()\n      ) : (\n        <HeaderBar\n          backgroundColor={backgroundColor}\n          enableSafeAreaTopInset={enableSafeAreaTopInset}\n          headerTitleContainerAnimatedStyle={headerTitleContainerAnimatedStyle}\n          leftTopIcon={leftTopIcon}\n          leftTopIconAccessibilityLabel={leftTopIconAccessibilityLabel}\n          leftTopIconOnPress={leftTopIconOnPress}\n          leftTopIconTestID={leftTopIconTestID}\n          rightTopIcon={rightTopIcon}\n          rightTopIconAccessibilityLabel={rightTopIconAccessibilityLabel}\n          rightTopIconOnPress={rightTopIconOnPress}\n          rightTopIconTestID={rightTopIconTestID}\n          title={title}\n          titleStyle={titleStyle}\n        />\n      )}\n      <View style={commonStyles.container}>\n        <StickyHeaderSectionList\n          ref={scrollViewRef}\n          {...rest}\n          contentContainerStyle={contentContainerStyle}\n          decelerationRate={decelerationRate}\n          nestedScrollEnabled={nestedScrollEnabled}\n          onMomentumScrollEnd={onMomentumScrollEnd}\n          onScroll={onScroll}\n          onScrollEndDrag={onScrollEndDrag}\n          overScrollMode={overScrollMode}\n          renderHeader={renderHeader ?? defaultRenderHeader}\n          renderSectionFooter={renderSectionFooter}\n          renderSectionHeader={renderSectionHeader}\n          scrollEventThrottle={scrollEventThrottle}\n          sections={sections}\n          stickySectionHeadersEnabled={stickySectionHeadersEnabled}\n        />\n      </View>\n    </Animated.View>\n  );\n}\n\ntype DetailsHeaderSectionListType = <ItemT, SectionT>(\n  props: DetailsHeaderSectionListProps<ItemT, SectionT> &\n    React.RefAttributes<SectionList<ItemT, SectionT>>\n) => React.ReactElement;\n\nexport const DetailsHeaderSectionList = React.forwardRef(\n  DetailsHeaderSectionListInner\n) as DetailsHeaderSectionListType;\n"]}