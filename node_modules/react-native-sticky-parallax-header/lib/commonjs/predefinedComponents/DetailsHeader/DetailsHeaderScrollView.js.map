{"version":3,"sources":["DetailsHeaderScrollView.tsx"],"names":["DetailsHeaderScrollView","React","forwardRef","props","ref","backgroundColor","children","contentContainerStyle","decelerationRate","enableSafeAreaTopInset","leftTopIcon","leftTopIconAccessibilityLabel","leftTopIconOnPress","leftTopIconTestID","nestedScrollEnabled","overScrollMode","renderHeader","renderHeaderBar","rightTopIcon","rightTopIconAccessibilityLabel","rightTopIconOnPress","rightTopIconTestID","scrollEventThrottle","title","titleStyle","rest","headerTitleContainerAnimatedStyle","onMomentumScrollEnd","onScroll","onScrollEndDrag","defaultRenderHeader","scrollViewRef","useImperativeHandle","current","wrapperAnimatedStyle","commonStyles","container"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type { ScrollView } from 'react-native';\nimport { View } from 'react-native';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\n\nimport { commonStyles } from '../../constants';\nimport { StickyHeaderScrollView } from '../../primitiveComponents/StickyHeaderScrollView';\nimport { parseAnimatedColorProp } from '../common/utils/parseAnimatedColorProp';\n\nimport type { DetailsHeaderScrollViewProps } from './DetailsHeaderProps';\nimport { HeaderBar } from './components/HeaderBar';\nimport { useDetailsHeader } from './hooks/useDetailsHeader';\n\nexport const DetailsHeaderScrollView = React.forwardRef<ScrollView, DetailsHeaderScrollViewProps>(\n  (props, ref) => {\n    const {\n      backgroundColor,\n      children,\n      contentContainerStyle,\n      decelerationRate = 'fast',\n      enableSafeAreaTopInset = true,\n      leftTopIcon,\n      leftTopIconAccessibilityLabel,\n      leftTopIconOnPress,\n      leftTopIconTestID,\n      nestedScrollEnabled = true,\n      overScrollMode = 'never',\n      renderHeader,\n      renderHeaderBar,\n      rightTopIcon,\n      rightTopIconAccessibilityLabel,\n      rightTopIconOnPress,\n      rightTopIconTestID,\n      scrollEventThrottle = 16,\n      title,\n      titleStyle,\n      ...rest\n    } = props;\n    const {\n      headerTitleContainerAnimatedStyle,\n      onMomentumScrollEnd,\n      onScroll,\n      onScrollEndDrag,\n      renderHeader: defaultRenderHeader,\n      scrollViewRef,\n    } = useDetailsHeader<ScrollView>(props);\n\n    React.useImperativeHandle(ref, () => scrollViewRef.current as ScrollView);\n\n    const wrapperAnimatedStyle = useAnimatedStyle(() => {\n      return {\n        backgroundColor: parseAnimatedColorProp(backgroundColor),\n      };\n    }, [backgroundColor]);\n\n    return (\n      <Animated.View style={[commonStyles.container, wrapperAnimatedStyle]}>\n        {renderHeaderBar ? (\n          renderHeaderBar()\n        ) : (\n          <HeaderBar\n            backgroundColor={backgroundColor}\n            enableSafeAreaTopInset={enableSafeAreaTopInset}\n            headerTitleContainerAnimatedStyle={headerTitleContainerAnimatedStyle}\n            leftTopIcon={leftTopIcon}\n            leftTopIconAccessibilityLabel={leftTopIconAccessibilityLabel}\n            leftTopIconOnPress={leftTopIconOnPress}\n            leftTopIconTestID={leftTopIconTestID}\n            rightTopIcon={rightTopIcon}\n            rightTopIconAccessibilityLabel={rightTopIconAccessibilityLabel}\n            rightTopIconOnPress={rightTopIconOnPress}\n            rightTopIconTestID={rightTopIconTestID}\n            title={title}\n            titleStyle={titleStyle}\n          />\n        )}\n        <View style={commonStyles.container}>\n          <StickyHeaderScrollView\n            ref={scrollViewRef}\n            {...rest}\n            contentContainerStyle={contentContainerStyle}\n            decelerationRate={decelerationRate}\n            nestedScrollEnabled={nestedScrollEnabled}\n            onMomentumScrollEnd={onMomentumScrollEnd}\n            onScroll={onScroll}\n            onScrollEndDrag={onScrollEndDrag}\n            overScrollMode={overScrollMode}\n            renderHeader={renderHeader ?? defaultRenderHeader}\n            scrollEventThrottle={scrollEventThrottle}>\n            {children}\n          </StickyHeaderScrollView>\n        </View>\n      </Animated.View>\n    );\n  }\n);\n"]}