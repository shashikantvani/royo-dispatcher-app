{"version":3,"sources":["withTabbedHeaderFlashList.tsx"],"names":["withTabbedHeaderFlashList","flashListComponent","StickyHeaderFlashList","React","forwardRef","props","ref","backgroundColor","decelerationRate","enableSafeAreaTopInset","logo","logoContainerStyle","logoResizeMode","logoStyle","nestedScrollEnabled","overScrollMode","renderHeader","renderHeaderBar","scrollEventThrottle","viewabilityConfig","itemVisiblePercentThreshold","rest","onMomentumScrollEnd","onScroll","onScrollEndDrag","onViewableItemsChanged","defaultRenderHeader","renderTabs","scrollViewRef","useImperativeHandle","current","wrapperAnimatedStyle","commonStyles","container","stretch","wrapper"],"mappings":"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","sourcesContent":["import type { FlashList, FlashListProps } from '@shopify/flash-list';\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\nimport type { Edge } from 'react-native-safe-area-context';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nimport { commonStyles } from '../../constants';\nimport type { StickyHeaderFlashListProps } from '../../primitiveComponents/StickyHeaderProps';\nimport { withStickyHeaderFlashList } from '../../primitiveComponents/withStickyHeaderFlashList';\nimport { parseAnimatedColorProp } from '../common/utils/parseAnimatedColorProp';\n\nimport type { TabbedHeaderFlashListProps } from './TabbedHeaderProps';\nimport { HeaderBar } from './components/HeaderBar';\nimport { useTabbedFlashListHeader } from './hooks/useTabbedFlashListHeader';\n\nexport function withTabbedHeaderFlashList<ItemT>(\n  flashListComponent: React.ComponentClass<FlashListProps<ItemT>>\n) {\n  const StickyHeaderFlashList = withStickyHeaderFlashList(\n    flashListComponent as React.ComponentClass<FlashListProps<ItemT>>\n  ) as (\n    props: StickyHeaderFlashListProps<ItemT> & React.RefAttributes<FlashList<ItemT>>\n  ) => React.ReactElement;\n\n  return React.forwardRef<FlashList<ItemT>, TabbedHeaderFlashListProps<ItemT>>((props, ref) => {\n    const {\n      backgroundColor,\n      decelerationRate = 'fast',\n      enableSafeAreaTopInset = true,\n      logo,\n      logoContainerStyle,\n      logoResizeMode,\n      logoStyle,\n      nestedScrollEnabled = true,\n      overScrollMode = 'never',\n      renderHeader,\n      renderHeaderBar,\n      scrollEventThrottle = 16,\n      viewabilityConfig = { itemVisiblePercentThreshold: 50 },\n      ...rest\n    } = props;\n    const {\n      onMomentumScrollEnd,\n      onScroll,\n      onScrollEndDrag,\n      onViewableItemsChanged,\n      renderHeader: defaultRenderHeader,\n      renderTabs,\n      scrollViewRef,\n    } = useTabbedFlashListHeader<ItemT>(props);\n\n    React.useImperativeHandle(ref, () => scrollViewRef.current as FlashList<ItemT>);\n\n    const wrapperAnimatedStyle = useAnimatedStyle(() => {\n      return {\n        backgroundColor: parseAnimatedColorProp(backgroundColor),\n      };\n    }, [backgroundColor]);\n\n    return (\n      <Animated.View style={[commonStyles.container, wrapperAnimatedStyle]}>\n        {renderHeaderBar ? (\n          renderHeaderBar()\n        ) : logo ? (\n          <HeaderBar\n            backgroundColor={backgroundColor}\n            enableSafeAreaTopInset={enableSafeAreaTopInset}\n            logo={logo}\n            logoContainerStyle={logoContainerStyle}\n            logoResizeMode={logoResizeMode}\n            logoStyle={logoStyle}\n          />\n        ) : (\n          <SafeAreaView\n            edges={['left', 'right', ...(enableSafeAreaTopInset ? ['top' as Edge] : [])]}\n            style={commonStyles.stretch}\n          />\n        )}\n        <View style={commonStyles.wrapper}>\n          <StickyHeaderFlashList\n            ref={scrollViewRef}\n            {...rest}\n            decelerationRate={decelerationRate}\n            nestedScrollEnabled={nestedScrollEnabled}\n            overScrollMode={overScrollMode}\n            scrollEventThrottle={scrollEventThrottle}\n            viewabilityConfig={viewabilityConfig}\n            renderHeader={renderHeader ?? defaultRenderHeader}\n            renderTabs={renderTabs}\n            onScroll={onScroll}\n            onScrollEndDrag={onScrollEndDrag}\n            onMomentumScrollEnd={onMomentumScrollEnd}\n            onViewableItemsChanged={onViewableItemsChanged}\n          />\n        </View>\n      </Animated.View>\n    );\n  });\n}\n"]}