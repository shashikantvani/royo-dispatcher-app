{"version":3,"sources":["HeaderBar.tsx"],"names":["HeaderBar","backgroundColor","enableSafeAreaTopInset","logo","logoResizeMode","logoStyle","logoContainerStyle","wrapperAnimatedStyle","safeAreaEdges","push","commonStyles","container","headerWrapper"],"mappings":"kFAAA,oDAQA,uFAEA,0EAEA,6CAEA,iF,0mCAWO,GAAMA,CAAAA,SAAmC,CAAG,QAAtCA,CAAAA,SAAsC,MAO7C,IANJC,CAAAA,eAMI,MANJA,eAMI,CALJC,sBAKI,MALJA,sBAKI,CAJJC,IAII,MAJJA,IAII,CAHJC,cAGI,MAHJA,cAGI,CAFJC,SAEI,MAFJA,SAEI,CADJC,kBACI,MADJA,kBACI,CACJ,GAAMC,CAAAA,oBAAoB,CAAG,4CAAiB,UAAM,CAClD,MAAO,CAELN,eAAe,CAAE,mDAAuBA,eAAvB,CAFZ,CAAP,CAID,CAL4B,CAK1B,CAACA,eAAD,CAL0B,CAA7B,CAMA,GAAMO,CAAAA,aAAqB,CAAG,CAAC,MAAD,CAAS,OAAT,CAA9B,CAEA,GAAIN,sBAAJ,CAA4B,CAC1BM,aAAa,CAACC,IAAd,CAAmB,KAAnB,EACD,CAED,MAEE,qBAAC,wCAAD,EAAc,KAAK,CAAED,aAArB,CAAoC,KAAK,CAAEE,wBAAaC,SAAxD,6EACE,oBAAC,8BAAD,CAAU,IAAV,EAAe,KAAK,CAAE,CAACD,wBAAaE,aAAd,CAA6BN,kBAA7B,CAAiDC,oBAAjD,CAAtB,6EACE,oBAAC,8BAAD,CAAU,KAAV,EACE,UAAU,CAAEH,cADd,CAEE,MAAM,CAAED,IAFV,CAGE,KAAK,CAAE,CAACO,wBAAaP,IAAd,CAAoBE,SAApB,CAHT,6EADF,CADF,CAFF,CAYD,CAhCM,C","sourcesContent":["import * as React from 'react';\nimport type {\n  ImageResizeMode,\n  ImageSourcePropType,\n  ImageStyle,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\nimport type { Edge } from 'react-native-safe-area-context';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nimport { commonStyles } from '../../../constants';\nimport type { AnimatedColorProp } from '../../common/SharedProps';\nimport { parseAnimatedColorProp } from '../../common/utils/parseAnimatedColorProp';\n\ninterface HeaderBarProps {\n  backgroundColor?: AnimatedColorProp;\n  enableSafeAreaTopInset?: boolean;\n  logo: ImageSourcePropType;\n  logoContainerStyle?: StyleProp<Animated.AnimateStyle<ViewStyle>>;\n  logoResizeMode?: ImageResizeMode;\n  logoStyle?: StyleProp<Animated.AnimateStyle<ImageStyle>>;\n}\n\nexport const HeaderBar: React.FC<HeaderBarProps> = ({\n  backgroundColor,\n  enableSafeAreaTopInset,\n  logo,\n  logoResizeMode,\n  logoStyle,\n  logoContainerStyle,\n}) => {\n  const wrapperAnimatedStyle = useAnimatedStyle(() => {\n    return {\n      // TypeScript complains about AnimatedNode<StyleProp<ViewStyle>> from reanimated v1\n      backgroundColor: parseAnimatedColorProp(backgroundColor) as string,\n    };\n  }, [backgroundColor]);\n  const safeAreaEdges: Edge[] = ['left', 'right'];\n\n  if (enableSafeAreaTopInset) {\n    safeAreaEdges.push('top');\n  }\n\n  return (\n    // @ts-ignore\n    <SafeAreaView edges={safeAreaEdges} style={commonStyles.container}>\n      <Animated.View style={[commonStyles.headerWrapper, logoContainerStyle, wrapperAnimatedStyle]}>\n        <Animated.Image\n          resizeMode={logoResizeMode}\n          source={logo}\n          style={[commonStyles.logo, logoStyle]}\n        />\n      </Animated.View>\n    </SafeAreaView>\n  );\n};\n"]}