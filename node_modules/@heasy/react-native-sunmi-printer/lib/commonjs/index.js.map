{"version":3,"names":["_reactNative","require","SunmiPrinter","SunmiScanModule","NativeModules","PrinterStyleKey","exports","PrinterStyleValue","AlignValue","SunmiScan","_default","default"],"sources":["index.tsx"],"sourcesContent":["import { NativeModules } from 'react-native';\n\nconst { SunmiPrinter, SunmiScanModule } = NativeModules;\n\nexport enum PrinterStyleKey {\n  // 文本倍宽\n  ENABLE_DOUBLE_WIDTH = 1000,\n  // 文本倍高\n  ENABLE_DOUBLE_HEIGHT = 1001,\n  // 文本加粗\n  ENABLE_BOLD = 1002,\n  // 文本下划线\n  ENABLE_UNDERLINE = 1003,\n  // 文本反白\n  ENABLE_ANTI_WHITE = 1004,\n  // 文本删除线\n  ENABLE_STRIKETHROUGH = 1005,\n  // 文本斜体\n  ENABLE_ILALIC = 1006,\n  // 文本倒影\n  ENABLE_INVERT = 1007,\n  // 设置文本左右间距\n  SET_TEXT_RIGHT_SPACING = 2000,\n  // 设置相对位置\n  SET_RELATIVE_POSITION = 2001,\n  // 设置绝对位置\n  SET_ABSOLUATE_POSITION = 2002,\n  // 设置行间距\n  SET_LINE_SPACING = 2003,\n  // 设置左边距\n  SET_LEFT_SPACING = 2004,\n  // 设置删除线的样式\n  SET_STRIKETHROUGH_STYLE = 2005,\n}\n\nexport enum PrinterStyleValue {\n  ENABLE = 1,\n  DISABLE = 2,\n}\n\nexport enum AlignValue {\n  LEFT = 0,\n  CENTER = 1,\n  RIGHT = 2,\n}\n\ntype SunmiPrinterType = {\n  /*\n   * 初始化打印机，重置打印逻辑程序，但不清空缓存区数据，因此\n   * 未完成的打印工作将在重置后继续\n   */\n  printerInit: () => void;\n  /**\n   * 打印自检\n   */\n  printerSelfChecking: () => void;\n  /*\n   * 获取打印机序号\n   * */\n  getPrinterSerialNo: () => Promise<string>;\n  /*\n   * 获取打印机固件版本号\n   * */\n  getPrinterVersion: () => Promise<string>;\n  /**\n   * 获取打印机服务版本号\n   * 此接⼝返回值可适⽤于所有商⽶机器判断但部分状态由于硬件配置不会拿到（例如⼿持机不⽀持\n   * 开盖检测）\n   */\n  getServiceVersion: () => Promise<string>;\n  /*\n   * 获取打印机型号\n   */\n  getPrinterModal: () => Promise<string>;\n  /**\n   * 获取打印机当前的纸张规格\n   * ⼿持打印机默认为58mm的纸张规格，台式打印机默认为80mm的纸张规格，但可以通过增加挡\n   * 板并进⾏打印机配置设置为使⽤58mm的纸张规格，此接⼝会返回当前打印机设置的纸张规格；\n   */\n  getPrinterPaper: () => Promise<string>;\n  /**\n   * 获取打印头打印长度\n   * ⽬前可获取到上电以来的打印⻓度，由于台式机和⼿持机的硬件区别，获取打印结果的返回略有\n   * 不同，即⼿持机通过ICallback callback接⼝获取打印⻓度，台式机通过返回值直接获取⻓度。\n   */\n  getPrintedLength: () => void;\n  /**\n   * 获取打印机的最新状态\n   */\n  updatePrinterState: () => Promise<number>;\n  /**\n   * 打印ESC/POS格式指令\n   * @param data\n   */\n  sendRAWData: (data: string) => void;\n  /**\n   * 设置打印机的样式\n   * @param key\n   * @description 定义设置不同的属性\n   * @param value\n   * @description 对应属性设置状态或大小\n   */\n  setPrinterStyle: (\n    key: PrinterStyleKey,\n    val: PrinterStyleValue | number\n  ) => void;\n  /**\n   * 设置对齐模式\n   * 全局⽅法，对之后执⾏的打印有影响，打印机初始化时取消相关设置。\n   *\n   * @param align\n   * @description 对⻬⽅式：AlignValue.LEFT => 居左；AlignValue.CENTER => 居中;AlignValue.RIGHT => 居右\n   */\n  setAlignment: (align: AlignValue) => void;\n  /**\n   * 设置自定义字体\n   * @param typeface\n   * @description 指定要使⽤的⾃定义字体名称，⽬前仅⽀持⽮量字体，字体需预置在应⽤assets⽬录\n   */\n  setFontName: (typeface: string) => void;\n  /**\n   * 设置字体大小\n   *\n   * @param size\n   * @description 全局⽅法，对之后打印有影响，初始化能取消设置，字体⼤⼩是超出标准国际指令的打印⽅式，\n   * 调整字体⼤⼩会影响字符宽度，每⾏字符数量也会随之改变，因此按等宽字体形成的排版可能会错乱。\n   */\n  setFontSize: (size: number) => void;\n  /**\n   * 设置与取消加粗\n   *\n   * @param isWeight\n   * @default false\n   */\n  setFontWeight: (isWeight: boolean) => void;\n  /**\n   * 打印文字\n   * 若要修改打印⽂本的样式（如：对⻬⽅式、字体⼤⼩、加粗等），请在调⽤printText⽅法前设\n   * 置。\n   *\n   * @param text\n   */\n  printerText: (text: string) => void;\n  /**\n   * 打印指定字体，⼤⼩的⽂本\n   * 字体设置只对本次有效\n   *\n   * @param text\n   * @description 打印内容，⽂字宽度超出⼀⾏⾃动换⾏排版，不满⼀⾏或超出⼀⾏不满⼀⾏部分需要在结尾\n   * 加强制换⾏符\"\\n\"才会即时打印出来，否则会缓存在缓存区。\n   * @param typeface\n   * @description 字体名称（现有版本暂时不⽀持设置字体，默认）。\n   * @param fontsize\n   * @description 字体⼤⼩，只对该⽅法有效。\n   */\n  printTextWithFont: (text: string, typeface: string, fontsize: number) => void;\n  /**\n   * 打印矢量文字\n   * ⽂字按⽮量⽂字宽度原样输出，即每个字符不等宽。\n   *\n   * @param text\n   * @description ⽂字按⽮量⽂字宽度原样输出，即每个字符不等宽。\n   */\n  printOriginalText: (text: string) => void;\n  /**\n   * 打印表格的一行（不支持阿拉伯字符）\n   *\n   * @param texts\n   * @description 字符串数组\n   * @param widths\n   * @description 各列宽度数组\n   * @param aligns\n   * @description 各列对⻬⽅式： AlignValue.LEFT => 居左, AlignValue.CENTER => 居中, AlignValue.RIGHT => 居右。\n   */\n  printColumnsText: (\n    texts: string[],\n    widths: number[],\n    aligns: number[]\n  ) => void;\n  /**\n   * 打印表格的⼀⾏，可以指定列宽、对齐⽅式\n   *\n   * @param texts\n   * @description 字符串数组\n   * @param widths\n   * @description 各列宽度数组\n   * @param aligns\n   * @description 各列对⻬⽅式： AlignValue.LEFT => 居左, AlignValue.CENTER => 居中, AlignValue.RIGHT => 居右。\n   */\n  printColumnsString: (\n    texts: string[],\n    widths: number[],\n    aligns: number[]\n  ) => void;\n  /**\n   * 打印⼀维条码\n   *\n   * @param data\n   * @description 维码内容\n   * @param symbology\n   * @description 条码类型(0-8)：0 -> UPC-A, 1 -> UPC-E, 2 -> JAN13(ENA13), 3 -> JAN8(EAN8), 4 -> CODE39, 5 -> ITF, 6 -> CODABAR, 7 -> CODE93, 8 -> CODE128\n   * @param height\n   * @default 162\n   * @description 条码⾼度, 取值 1 - 255\n   * @param width\n   * @default 2\n   * @description 条码宽度, 取值 2 - 6,\n   * @param textPosition\n   * @description ⽂字位置（0 - 3）：0 -> 不打印文字, 1 -> 文字在条码上方, 2 -> ⽂字在条码下⽅, 3 -> 条码上下⽅均打印\n   */\n  printBarCode: (\n    data: string,\n    symbology: number,\n    height: number,\n    width: number,\n    textPosition: number\n  ) => void;\n  /**\n   * 打印QR条码\n   * @description 普通打印状态下在调⽤该⽅法后会直接输出打印，每个⼆维码块为 4 个像素点（⼩于 4 扫码解析\n   * 有可能失败）。最⼤⽀持 version19（93*93）的模式。\n   *\n   * @param data\n   * @description QR码内容\n   * @param modulesize\n   * @description QR码块⼤⼩，单位:点, 取值 4 ⾄ 16。\n   * @param errorlevel\n   * @description ⼆维码纠错等级(0 - 3)：0 -> 纠错级别 L ( 7%), 1 -> 纠错级别 M (15%), 2 -> 纠错级别 Q (25%), 3 -> 纠错级别 H (30%)\n   */\n  printQRCode: (data: string, modulesize: number, errorlevel: number) => void;\n  /**\n   * 打印⼆维条码\n   * @description 普通打印状态下在调⽤该⽅法后会直接输出打印；此接⼝在4.1.2版本后⽀持;\n   *\n   * @param data\n   * @description 二维码内容\n   * @param symbology\n   * @description 二维码类型：1 -> Qr（同printQRCode接⼝）, 2 -> PDF417, 3 -> DataMatrix\n   * @param modulesize\n   * @description ⼆维码有效块⼤⼩，根据码类型不同，⽀持的最佳块⼤⼩不同：Qr -> 4～16（同printQRCode接⼝）, PDF417 -> 1～4, DataMatrix -> 4～16\n   * @param errorlevel\n   * @description ⼆维码纠错等级，根据码类型不同，⽀持等级范围不同：Qr -> 0～3（同printQRCode接⼝）, PDF417 -> 0～8, DataMatrix -> 默认使⽤ECC200⾃动纠错 不⽀持设置\n   */\n  print2DCode: (\n    data: string,\n    sysmbology: number,\n    modulesize: number,\n    errorlevel: number\n  ) => void;\n  /**\n   * 包事务打印专⽤接⼝\n   *\n   * @param tranBean\n   * @description 任务列表\n   */\n  commitPrint: (list: any) => void;\n  /**\n   * 进⼊事务模式\n   *\n   * @param clear\n   * @description 是否清除缓冲区内容：true -> 清除上⼀次事务打印未提交的内容；false -> 不清除上⼀次事务打印未提交的内容，下次提交将包含上次的内容。\n   */\n  enterPrinterBuffer: (clear: boolean) => void;\n  /**\n   * exitPrinterBuffer\n   * @support 除V1设备\n   * @param commit\n   * @description 是否打印出缓冲区内容：true -> 会打印出事务队列中的所有内容；false -> 不会打印事务队列中的内容，此内容将保存直到下次提交。\n   */\n  exitPrinterBuffer: (commit: boolean) => void;\n  /**\n   * 提交事务打印\n   * @support 除V1设备\n   * @description 将事务队列中的所有内容提交并打印，之后仍然处于事务打印模式。\n   */\n  commitPrinterBuffer: () => void;\n  /**\n   * 提交事务打印并回调结果\n   *\n   * @support 除V1版本\n   */\n  commitPrinterBufferWithCallbacka: () => void;\n  /**\n   * 打印机⾛纸n⾏\n   * @description 强制换⾏，结束之前的打印内容后⾛纸 n ⾏。\n   *\n   * @param num\n   * @description 走纸行数\n   */\n  lineWrap: (num: number) => void;\n  /**\n   * 切纸\n   * @supported 仅⽀持台式机带切⼑功能机器\n   * @description 由于打印头和切⼑有⼀定距离，调⽤接⼝将⾃动补全这段距离；\n   */\n  cutPaper: () => void;\n  /**\n   * 获取切⼑次数\n   */\n  getCutPaperTimes: () => Promise<number>;\n  /**\n   * 打开钱箱\n   * @supported 仅⽀持台式机带钱箱功能机器。\n   */\n  openDrawer: () => void;\n  /**\n   * 获取当前的钱箱状态\n   * @supported ⽬前仅对S2、T2、T2mini机器 v4.0.0版本以上⽀持此接⼝\n   * @description 可以通过此接⼝在部分具有连接钱箱功能的机型上获取钱箱开关状态,\n   */\n  getDrawerStatus: () => void;\n  /**\n   * 打印图片\n   * 图⽚最⼤像素需要宽x⾼⼩于250万，且宽度根据纸张规格设置（58为384像素，80为576像素），\n   * 如果超过纸张宽度将不显示\n   * https://github.com/Surile/react-native-sunmi-printer/issues/1#issuecomment-1088685896\n   * @param encodedString\n   * @param pixelWidth\n   */\n  printBitmap: (encodedString: string, pixelWidth: number) => void;\n  /**\n   * 打印图⽚(2)\n   * 图⽚像素分辨率⼩于200万，且宽度根据纸张规格设置（58为384像素，80为576像素），如果超\n   * 过纸张宽度将不显示\n   *\n   * @param bitmap\n   * @param type\n   */\n  printBitmapCustom: (bitmap: any, type: number) => void;\n  /**\n   * 打印图⽚(3)\n   * 图⽚像素分辨率⼩于200万，且宽度根据纸张规格设置（58为384像素，80为576像素），如果超\n   * 过纸张宽度将不显示\n   *\n   * @param encodedString\n   * @param pixelWidth\n   * @param type\n   */\n  printBitmapBase64Custom: (\n    encodedString: string,\n    pixelWidth: number,\n    type: number\n  ) => void;\n  /**\n   * 是否存在打印机服务\n   */\n  hasPrinter: () => Promise<boolean>;\n};\n\ntype SunmiScanType = {\n  /**\n   * 摄像头扫码\n   */\n  scan: () => Promise<any>;\n};\n\nexport const SunmiScan = SunmiScanModule as SunmiScanType;\n\nexport default SunmiPrinter as SunmiPrinterType;\n"],"mappings":";;;;;;AAAA,IAAAA,YAAA,GAAAC,OAAA;AAEA,MAAM;EAAEC,YAAY;EAAEC;AAAgB,CAAC,GAAGC,0BAAa;AAAC,IAE5CC,eAAe,GAAAC,OAAA,CAAAD,eAAA,0BAAfA,eAAe;EAAfA,eAAe,CAAfA,eAAe;EAAfA,eAAe,CAAfA,eAAe;EAAfA,eAAe,CAAfA,eAAe;EAAfA,eAAe,CAAfA,eAAe;EAAfA,eAAe,CAAfA,eAAe;EAAfA,eAAe,CAAfA,eAAe;EAAfA,eAAe,CAAfA,eAAe;EAAfA,eAAe,CAAfA,eAAe;EAAfA,eAAe,CAAfA,eAAe;EAAfA,eAAe,CAAfA,eAAe;EAAfA,eAAe,CAAfA,eAAe;EAAfA,eAAe,CAAfA,eAAe;EAAfA,eAAe,CAAfA,eAAe;EAAfA,eAAe,CAAfA,eAAe;EAAA,OAAfA,eAAe;AAAA;AAAA,IA+BfE,iBAAiB,GAAAD,OAAA,CAAAC,iBAAA,0BAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAAA,OAAjBA,iBAAiB;AAAA;AAAA,IAKjBC,UAAU,GAAAF,OAAA,CAAAE,UAAA,0BAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAA,OAAVA,UAAU;AAAA;AA4Tf,MAAMC,SAAS,GAAAH,OAAA,CAAAG,SAAA,GAAGN,eAAgC;AAAC,IAAAO,QAAA,GAAAJ,OAAA,CAAAK,OAAA,GAE3CT,YAAY"}